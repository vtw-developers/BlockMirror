(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack:///./node_modules/node-libs-browser/mock/empty.js?");

/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/path-browserify/index.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n//# sourceURL=webpack:///(webpack)/buildin/module.js?");

/***/ }),

/***/ "./src/cellslice.ts":
/*!**************************!*\
  !*** ./src/cellslice.ts ***!
  \**************************/
/*! exports provided: CellSlice */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CellSlice\", function() { return CellSlice; });\nclass CellSlice {\n    /**\n     * Construct an instance of a cell slice.\n     */\n    constructor(cell, slice, executionTime) {\n        this.cell = cell;\n        this._slice = slice;\n        this.executionTime = executionTime;\n    }\n    /**\n     * Get the text in the slice of a cell.\n     */\n    get textSlice() {\n        return this.getTextSlice(false);\n    }\n    /**\n     * Get the text of all lines in a slice (no deletions from lines).\n     */\n    get textSliceLines() {\n        return this.getTextSlice(true);\n    }\n    getTextSlice(fullLines) {\n        let sliceLocations = this.slice.items;\n        let textLines = this.cell.text.split('\\n');\n        return sliceLocations\n            .sort((l1, l2) => l1.first_line - l2.first_line)\n            .map(loc => {\n            // grab the desired subset of lines (they are one-indexed)\n            const lines = textLines.slice(loc.first_line - 1, loc.last_line + (loc.last_column > 0 ? 0 : -1));\n            if (!fullLines) {\n                // if we don't want full lines, then adjust the first and last lines based on columns\n                if (loc.last_line === loc.first_line) {\n                    lines[0] = lines[0].slice(loc.first_column, loc.last_column);\n                }\n                else {\n                    lines[0] = lines[0].slice(loc.first_column);\n                    const last = lines.length - 1;\n                    lines[last] = lines[last].slice(0, loc.last_column);\n                }\n            }\n            return lines.join('\\n');\n        })\n            .filter(text => text != '')\n            .join('\\n');\n    }\n    /**\n     * Get the slice.\n     */\n    get slice() {\n        return this._slice;\n    }\n    /**\n     * Set the slice.\n     */\n    set slice(slice) {\n        this._slice = slice;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/cellslice.ts?");

/***/ }),

/***/ "./src/control-flow.ts":
/*!*****************************!*\
  !*** ./src/control-flow.ts ***!
  \*****************************/
/*! exports provided: Block, ControlFlowGraph */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Block\", function() { return Block; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ControlFlowGraph\", function() { return ControlFlowGraph; });\n/* harmony import */ var _python_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./python-parser */ \"./src/python-parser.ts\");\n/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./set */ \"./src/set.ts\");\n/* harmony import */ var _printNode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./printNode */ \"./src/printNode.ts\");\n\n\n\nclass Block {\n    constructor(id, hint, statements, loopVariables = []) {\n        this.id = id;\n        this.hint = hint;\n        this.statements = statements;\n        this.loopVariables = loopVariables;\n    }\n    toString() {\n        return (`BLOCK ${this.id} (${this.hint})\\n` +\n            this.statements\n                .map(s => `${s.location.first_line}: ${Object(_printNode__WEBPACK_IMPORTED_MODULE_2__[\"printNode\"])(s)}`)\n                .join('\\n'));\n    }\n}\nclass BlockSet extends _set__WEBPACK_IMPORTED_MODULE_1__[\"Set\"] {\n    constructor(...items) {\n        super(b => b.id.toString(), ...items);\n    }\n}\nclass Context {\n    constructor(loopHead, loopExit, exceptionBlock) {\n        this.loopHead = loopHead;\n        this.loopExit = loopExit;\n        this.exceptionBlock = exceptionBlock;\n    }\n    forLoop(loopHead, loopExit) {\n        return new Context(loopHead, loopExit, this.exceptionBlock);\n    }\n    forExcepts(exceptionBlock) {\n        return new Context(this.loopHead, this.loopExit, exceptionBlock);\n    }\n}\nclass ControlFlowGraph {\n    constructor(node) {\n        this._blocks = [];\n        this.globalId = 0;\n        this.successors = new _set__WEBPACK_IMPORTED_MODULE_1__[\"Set\"](([b1, b2]) => b1.id + ',' + b2.id);\n        this.loopVariables = [];\n        this.postdominators = new PostdominatorSet();\n        if (!node) {\n            throw 'argument undefined';\n        }\n        let statements = [];\n        if (node.type == _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"MODULE\"]) {\n            statements = Array.isArray(node.code) ? node.code : [node.code];\n        }\n        else if (node.type == _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DEF\"]) {\n            statements = Array.isArray(node.code) ? node.code : [node.code];\n        }\n        [this.entry, this.exit] = this.makeCFG('entry', statements, new Context(null, null, this.makeBlock('exceptional exit')));\n    }\n    makeBlock(hint, statements = []) {\n        const b = new Block(this.globalId++, hint, statements);\n        if (this.loopVariables.length) {\n            b.loopVariables = this.loopVariables[this.loopVariables.length - 1];\n        }\n        this._blocks.push(b);\n        return b;\n    }\n    get blocks() {\n        const visited = [];\n        const toVisit = new BlockSet(this.entry);\n        while (toVisit.size) {\n            const block = toVisit.take();\n            visited.push(block);\n            this.successors.items.forEach(([pred, succ]) => {\n                if (pred === block && visited.indexOf(succ) < 0) {\n                    toVisit.add(succ);\n                }\n            });\n        }\n        return visited;\n    }\n    getSuccessors(block) {\n        return this.successors.items\n            .filter(([p, _]) => p == block)\n            .map(([_, s]) => s);\n    }\n    getPredecessors(block) {\n        return this.successors.items\n            .filter(([_, s]) => s == block)\n            .map(([p, _]) => p);\n    }\n    print() {\n        console.log('CFG', 'ENTRY:', this.entry.id, 'EXIT:', this.exit.id);\n        this.blocks.forEach(block => {\n            console.log(block.toString());\n            if (block === this.exit) {\n                console.log('    EXIT');\n            }\n            else {\n                console.log('    SUCC', this.getSuccessors(block)\n                    .map(b => b.id.toString())\n                    .join(','));\n            }\n        });\n    }\n    link(...blocks) {\n        for (let i = 1; i < blocks.length; i++)\n            this.successors.add([blocks[i - 1], blocks[i]]);\n    }\n    handleIf(statement, last, context) {\n        const ifCondBlock = this.makeBlock('if cond', [statement.cond]);\n        if (!statement.code)\n            console.log(statement);\n        const [bodyEntry, bodyExit] = this.makeCFG('if body', statement.code, context);\n        this.link(last, ifCondBlock);\n        this.link(ifCondBlock, bodyEntry);\n        const joinBlock = this.makeBlock('conditional join');\n        this.link(bodyExit, joinBlock);\n        let lastCondBlock = ifCondBlock;\n        if (statement.elif) {\n            statement.elif.forEach(elif => {\n                const elifCondBlock = this.makeBlock('elif cond', [elif.cond]);\n                this.link(lastCondBlock, elifCondBlock);\n                const [elifEntry, elifExit] = this.makeCFG('elif body', elif.code, context);\n                this.link(elifCondBlock, elifEntry);\n                this.link(elifExit, joinBlock);\n                lastCondBlock = elifCondBlock;\n            });\n        }\n        if (statement.else) {\n            let elseStmt = statement.else;\n            if (elseStmt.code && elseStmt.code.length) {\n                // XXX: 'Else' isn't *really* a condition, though we're treating it like it is\n                // so we can mark a dependence between the body of the else and its header.\n                const elseCondBlock = this.makeBlock('else cond', [elseStmt]);\n                this.link(lastCondBlock, elseCondBlock);\n                const [elseEntry, elseExit] = this.makeCFG('else body', elseStmt.code, context);\n                this.link(elseCondBlock, elseEntry);\n                this.link(elseExit, joinBlock);\n                lastCondBlock = elseCondBlock;\n            }\n        }\n        this.link(lastCondBlock, joinBlock);\n        return joinBlock;\n    }\n    handleWhile(statement, last, context) {\n        const loopHeadBlock = this.makeBlock('while loop head', [statement.cond]);\n        this.link(last, loopHeadBlock);\n        const afterLoop = this.makeBlock('while loop join');\n        this.loopVariables.push([statement.cond]);\n        const [bodyEntry, bodyExit] = this.makeCFG('while body', statement.code, context.forLoop(loopHeadBlock, afterLoop));\n        this.loopVariables.pop();\n        this.link(loopHeadBlock, bodyEntry);\n        this.link(bodyExit, loopHeadBlock); // back edge\n        this.link(loopHeadBlock, afterLoop);\n        return afterLoop;\n    }\n    handleFor(statement, last, context) {\n        const loopHeadBlock = this.makeBlock('for loop head', \n        // synthesize a statement to simulate using the iterator\n        [\n            {\n                type: _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"ASSIGN\"],\n                op: undefined,\n                sources: statement.iter,\n                targets: statement.target,\n                location: statement.decl_location,\n            },\n        ]);\n        this.link(last, loopHeadBlock);\n        const afterLoop = this.makeBlock('for loop join');\n        this.loopVariables.push(statement.target);\n        const [bodyEntry, bodyExit] = this.makeCFG('for body', statement.code, context.forLoop(loopHeadBlock, afterLoop));\n        this.loopVariables.pop();\n        this.link(loopHeadBlock, bodyEntry);\n        this.link(bodyExit, loopHeadBlock); // back edge\n        this.link(loopHeadBlock, afterLoop);\n        return afterLoop;\n    }\n    handleWith(statement, last, context) {\n        const assignments = statement.items.map(({ with: w, as: a }) => ({\n            type: _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"ASSIGN\"],\n            targets: [a],\n            sources: [w],\n            location: w.location,\n        }));\n        const resourceBlock = this.makeBlock('with', assignments);\n        this.link(last, resourceBlock);\n        const [bodyEntry, bodyExit] = this.makeCFG('with body', statement.code, context);\n        this.link(resourceBlock, bodyEntry);\n        return bodyExit;\n    }\n    handleTry(statement, last, context) {\n        const afterTry = this.makeBlock('try join');\n        let exnContext = context;\n        let handlerExits = [];\n        let handlerHead = undefined;\n        if (statement.excepts) {\n            handlerHead = this.makeBlock('handlers');\n            const handlerCfgs = statement.excepts.map(handler => this.makeCFG('handler body', handler.code, context));\n            handlerCfgs.forEach(([exceptEntry, _]) => this.link(handlerHead, exceptEntry));\n            exnContext = context.forExcepts(handlerHead);\n            handlerExits = handlerCfgs.map(([_, exceptExit]) => exceptExit);\n        }\n        const [bodyEntry, bodyExit] = this.makeCFG('try body', statement.code, exnContext);\n        this.link(last, bodyEntry);\n        let normalExit = bodyExit;\n        if (handlerHead) {\n            this.link(bodyExit, handlerHead);\n        }\n        if (statement.else) {\n            const [elseEntry, elseExit] = this.makeCFG('try else body', statement.else, context);\n            this.link(normalExit, elseEntry);\n            normalExit = elseExit;\n        }\n        if (statement.finally) {\n            const [finallyEntry, finallyExit] = this.makeCFG('finally body', statement.finally, context);\n            this.link(normalExit, finallyEntry);\n            this.link(finallyExit, afterTry);\n            handlerExits.forEach(handlerExit => this.link(handlerExit, finallyEntry));\n        }\n        else {\n            handlerExits.forEach(handlerExit => this.link(handlerExit, afterTry));\n            this.link(normalExit, afterTry);\n        }\n        return afterTry;\n    }\n    makeCFG(hint, statements, context) {\n        if (!hint) {\n            throw 'hint undefined';\n        }\n        if (!statements) {\n            throw 'statements undefined';\n        }\n        if (!context) {\n            throw 'context undefined';\n        }\n        const entry = this.makeBlock(hint);\n        let last = entry;\n        statements.forEach(statement => {\n            switch (statement.type) {\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"IF\"]:\n                    last = this.handleIf(statement, last, context);\n                    break;\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"WHILE\"]:\n                    last = this.handleWhile(statement, last, context);\n                    break;\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"FOR\"]:\n                    last = this.handleFor(statement, last, context);\n                    break;\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"WITH\"]:\n                    last = this.handleWith(statement, last, context);\n                    break;\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"TRY\"]:\n                    last = this.handleTry(statement, last, context);\n                    break;\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"RAISE\"]:\n                    this.link(last, context.exceptionBlock);\n                    return;\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"BREAK\"]:\n                    this.link(last, context.loopExit);\n                    return;\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"CONTINUE\"]:\n                    this.link(last, context.loopHead);\n                    return;\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DEF\"]:\n                case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"CLASS\"]:\n                default:\n                    last.statements.push(statement);\n                    break;\n            }\n        });\n        return [entry, last];\n    }\n    /**\n     * Based on the algorithm in \"Engineering a Compiler\", 2nd ed., Cooper and Torczon:\n     * - p479: computing dominance\n     * - p498-500: dominator trees and frontiers\n     * - p544: postdominance and reverse dominance frontier\n     */\n    visitControlDependencies(visit) {\n        let blocks = this.blocks;\n        this.postdominators = this.findPostdominators(blocks);\n        this.immediatePostdominators = this.getImmediatePostdominators(this.postdominators.items);\n        this.reverseDominanceFrontiers = this.buildReverseDominanceFrontiers(blocks);\n        // Mine the dependencies.\n        for (let block of blocks) {\n            if (this.reverseDominanceFrontiers.hasOwnProperty(block.id)) {\n                let frontier = this.reverseDominanceFrontiers[block.id];\n                for (let frontierBlock of frontier.items) {\n                    for (let controlStmt of frontierBlock.statements) {\n                        for (let stmt of block.statements) {\n                            visit(controlStmt, stmt);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    postdominatorExists(block, postdominator) {\n        return (this.postdominators.filter(p => p.block == block && p.postdominator == postdominator).size > 0);\n    }\n    getImmediatePostdominator(block) {\n        let immediatePostdominators = this.immediatePostdominators.items.filter(p => p.block == block);\n        return immediatePostdominators[0];\n    }\n    findPostdominators(blocks) {\n        // Initially, every block has every other block as a postdominator, except for the last block.\n        let postdominators = {};\n        for (let block of blocks) {\n            postdominators[block.id] = new PostdominatorSet();\n            for (let otherBlock of blocks) {\n                let distance = block.id == otherBlock.id ? 0 : Infinity;\n                postdominators[block.id].add(new Postdominator(distance, block, otherBlock));\n            }\n        }\n        let lastBlock = blocks.filter(b => this.getSuccessors(b).length == 0)[0];\n        postdominators[lastBlock.id] = new PostdominatorSet(new Postdominator(0, lastBlock, lastBlock));\n        let changed = true;\n        while (changed == true) {\n            changed = false;\n            for (let block of blocks) {\n                if (block == lastBlock)\n                    continue;\n                let oldPostdominators = postdominators[block.id];\n                let successors = this.getSuccessors(block);\n                // Merge postdominators that appear in all of a block's successors.\n                let newPostdominators = new PostdominatorSet(...[]\n                    .concat(...successors.map(s => postdominators[s.id].items))\n                    .reduce((pCounts, p) => {\n                    let countIndex = pCounts.findIndex(record => {\n                        return record.p.postdominator == p.postdominator;\n                    });\n                    let countRecord;\n                    if (countIndex == -1) {\n                        countRecord = {\n                            p: new Postdominator(p.distance + 1, block, p.postdominator),\n                            count: 0,\n                        };\n                        pCounts.push(countRecord);\n                    }\n                    else {\n                        countRecord = pCounts[countIndex];\n                        pCounts[countIndex].p.distance = Math.min(pCounts[countIndex].p.distance, p.distance + 1);\n                    }\n                    countRecord.count++;\n                    return pCounts;\n                }, [])\n                    .filter((p) => {\n                    return p.count == successors.length;\n                })\n                    .map((p) => {\n                    return p.p;\n                }));\n                // A block always postdominates itself.\n                newPostdominators.add(new Postdominator(0, block, block));\n                if (!oldPostdominators.equals(newPostdominators)) {\n                    postdominators[block.id] = newPostdominators;\n                    changed = true;\n                }\n            }\n        }\n        let result = new PostdominatorSet();\n        Object.keys(postdominators).forEach(blockId => {\n            result = result.union(postdominators[blockId]);\n        });\n        return result;\n    }\n    getImmediatePostdominators(postdominators) {\n        let postdominatorsByBlock = postdominators\n            .filter(p => p.block != p.postdominator)\n            .reduce((dict, postdominator) => {\n            if (!dict.hasOwnProperty(postdominator.block.id)) {\n                dict[postdominator.block.id] = [];\n            }\n            dict[postdominator.block.id].push(postdominator);\n            return dict;\n        }, {});\n        let immediatePostdominators = [];\n        Object.keys(postdominatorsByBlock).forEach(blockId => {\n            immediatePostdominators.push(postdominatorsByBlock[blockId].sort((a, b) => {\n                return a.distance - b.distance;\n            })[0]);\n        });\n        return new PostdominatorSet(...immediatePostdominators);\n    }\n    buildReverseDominanceFrontiers(blocks) {\n        let frontiers = {};\n        for (let block of blocks) {\n            let successors = this.getSuccessors(block);\n            if (successors.length > 1) {\n                let workQueue = successors;\n                let scheduled = [];\n                let blockImmediatePostdominator = this.getImmediatePostdominator(block);\n                while (workQueue.length > 0) {\n                    let item = workQueue.pop();\n                    // A branch's successor might be a join point. These aren't dependencies.\n                    if (this.postdominatorExists(block, item))\n                        continue;\n                    if (!frontiers.hasOwnProperty(item.id)) {\n                        frontiers[item.id] = new BlockSet();\n                    }\n                    let frontier = frontiers[item.id];\n                    frontier.add(block);\n                    let immediatePostdominator = this.getImmediatePostdominator(item);\n                    if (immediatePostdominator.postdominator !=\n                        blockImmediatePostdominator.postdominator) {\n                        this.getSuccessors(item).forEach(b => {\n                            if (scheduled.indexOf(b) == -1) {\n                                scheduled.push(b);\n                                workQueue.push(b);\n                            }\n                        });\n                    }\n                }\n            }\n        }\n        return frontiers;\n    }\n}\n/**\n * A block and another block that postdominates it. Distance is the length of the longest path\n * from the block to its postdominator.\n */\nclass Postdominator {\n    constructor(distance, block, postdominator) {\n        this.distance = distance;\n        this.block = block;\n        this.postdominator = postdominator;\n    }\n}\n/**\n * A set of postdominators\n */\nclass PostdominatorSet extends _set__WEBPACK_IMPORTED_MODULE_1__[\"Set\"] {\n    constructor(...items) {\n        super(p => p.block.id + ',' + p.postdominator.id, ...items);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/control-flow.ts?");

/***/ }),

/***/ "./src/data-flow.ts":
/*!**************************!*\
  !*** ./src/data-flow.ts ***!
  \**************************/
/*! exports provided: DataflowAnalyzer, ReferenceType, SymbolType, RefSet, sameLocation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DataflowAnalyzer\", function() { return DataflowAnalyzer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ReferenceType\", function() { return ReferenceType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SymbolType\", function() { return SymbolType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RefSet\", function() { return RefSet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sameLocation\", function() { return sameLocation; });\n/* harmony import */ var _python_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./python-parser */ \"./src/python-parser.ts\");\n/* harmony import */ var _control_flow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control-flow */ \"./src/control-flow.ts\");\n/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./set */ \"./src/set.ts\");\n/* harmony import */ var _specs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./specs */ \"./src/specs/index.ts\");\n/* harmony import */ var _symbol_table__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./symbol-table */ \"./src/symbol-table.ts\");\n\n\n\n\n\nclass DefUse {\n    constructor(DEFINITION = new RefSet(), UPDATE = new RefSet(), USE = new RefSet()) {\n        this.DEFINITION = DEFINITION;\n        this.UPDATE = UPDATE;\n        this.USE = USE;\n    }\n    get defs() { return this.DEFINITION.union(this.UPDATE); }\n    get uses() { return this.UPDATE.union(this.USE); }\n    union(that) {\n        return new DefUse(this.DEFINITION.union(that.DEFINITION), this.UPDATE.union(that.UPDATE), this.USE.union(that.USE));\n    }\n    update(newRefs) {\n        const GEN_RULES = {\n            USE: [ReferenceType.UPDATE, ReferenceType.DEFINITION],\n            UPDATE: [ReferenceType.DEFINITION],\n            DEFINITION: []\n        };\n        const KILL_RULES = {\n            // Which types of references \"kill\" which other types of references?\n            // In general, the rule of thumb here is, if x depends on y, x kills y, because anything that\n            // depends on x will now depend on y transitively.\n            // If x overwrites y, x also kills y.\n            // The one case where a variable doesn't kill a previous variable is the global configuration, because\n            // it neither depends on initializations or updates, nor clobbers them.\n            DEFINITION: [ReferenceType.DEFINITION, ReferenceType.UPDATE],\n            UPDATE: [ReferenceType.DEFINITION, ReferenceType.UPDATE],\n            USE: []\n        };\n        for (let level of Object.keys(ReferenceType)) {\n            let genSet = new RefSet();\n            for (let genLevel of GEN_RULES[level]) {\n                genSet = genSet.union(newRefs[genLevel]);\n            }\n            const killSet = this[level].filter(def => genSet.items.some(gen => gen.name == def.name && KILL_RULES[gen.level].indexOf(def.level) != -1));\n            this[level] = this[level].minus(killSet).union(genSet);\n        }\n    }\n    equals(that) {\n        return this.DEFINITION.equals(that.DEFINITION) &&\n            this.UPDATE.equals(that.UPDATE) &&\n            this.USE.equals(that.USE);\n    }\n    createFlowsFrom(fromSet) {\n        const toSet = this;\n        let refsDefined = new RefSet();\n        let newFlows = new _set__WEBPACK_IMPORTED_MODULE_2__[\"Set\"](getDataflowId);\n        for (let level of Object.keys(ReferenceType)) {\n            for (let to of toSet[level].items) {\n                for (let from of fromSet[level].items) {\n                    if (from.name == to.name) {\n                        refsDefined.add(to);\n                        newFlows.add({ fromNode: from.node, toNode: to.node, fromRef: from, toRef: to });\n                    }\n                }\n            }\n        }\n        return [newFlows, refsDefined];\n    }\n}\n/**\n * Use a shared dataflow analyzer object for all dataflow analysis / querying for defs and uses.\n * It caches defs and uses for each statement, which can save time.\n * For caching to work, statements must be annotated with a cell's ID and execution count.\n */\nclass DataflowAnalyzer {\n    constructor(moduleMap) {\n        this._defUsesCache = {};\n        this._symbolTable = new _symbol_table__WEBPACK_IMPORTED_MODULE_4__[\"SymbolTable\"](moduleMap || _specs__WEBPACK_IMPORTED_MODULE_3__[\"DefaultSpecs\"]);\n    }\n    getDefUseForStatement(statement, defsForMethodResolution) {\n        let cacheKey = _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"locationString\"](statement.location);\n        const cached = this._defUsesCache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let defSet = this.getDefs(statement, defsForMethodResolution);\n        let useSet = this.getUses(statement);\n        let result = new DefUse(defSet.filter(r => r.level === ReferenceType.DEFINITION), defSet.filter(r => r.level === ReferenceType.UPDATE), useSet);\n        this._defUsesCache[cacheKey] = result;\n        return result;\n    }\n    analyze(cfg, refSet) {\n        const workQueue = cfg.blocks.reverse();\n        let undefinedRefs = new RefSet();\n        let dataflows = new _set__WEBPACK_IMPORTED_MODULE_2__[\"Set\"](getDataflowId);\n        let defUsePerBlock = new Map(workQueue.map(block => [block.id, new DefUse()]));\n        if (refSet) {\n            defUsePerBlock.get(cfg.blocks[0].id).update(new DefUse(refSet));\n        }\n        while (workQueue.length) {\n            const block = workQueue.pop();\n            let initialBlockDefUse = defUsePerBlock.get(block.id);\n            let blockDefUse = cfg.getPredecessors(block)\n                .reduce((defuse, predBlock) => defuse.union(defUsePerBlock.get(predBlock.id)), initialBlockDefUse);\n            for (let statement of block.statements) {\n                let statementDefUse = this.getDefUseForStatement(statement, blockDefUse.defs);\n                let [newFlows, definedRefs] = statementDefUse.createFlowsFrom(blockDefUse);\n                dataflows = dataflows.union(newFlows);\n                undefinedRefs = undefinedRefs.union(statementDefUse.uses).minus(definedRefs);\n                blockDefUse.update(statementDefUse);\n            }\n            if (!initialBlockDefUse.equals(blockDefUse)) {\n                defUsePerBlock.set(block.id, blockDefUse);\n                // We've updated this block's info, so schedule its successor blocks.\n                for (let succ of cfg.getSuccessors(block)) {\n                    if (workQueue.indexOf(succ) < 0) {\n                        workQueue.push(succ);\n                    }\n                }\n            }\n        }\n        cfg.visitControlDependencies((controlStmt, stmt) => dataflows.add({ fromNode: controlStmt, toNode: stmt }));\n        return { dataflows, undefinedRefs };\n    }\n    getDefs(statement, defsForMethodResolution) {\n        if (!statement)\n            return new RefSet();\n        let defs = runAnalysis(ApiCallAnalysis, defsForMethodResolution, statement, this._symbolTable)\n            .union(runAnalysis(DefAnnotationAnalysis, defsForMethodResolution, statement, this._symbolTable));\n        switch (statement.type) {\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"IMPORT\"]:\n                defs = defs.union(this.getImportDefs(statement));\n                break;\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"FROM\"]:\n                defs = defs.union(this.getImportFromDefs(statement));\n                break;\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DEF\"]:\n                defs = defs.union(this.getFuncDefs(statement, defsForMethodResolution));\n                break;\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"CLASS\"]:\n                defs = defs.union(this.getClassDefs(statement));\n                break;\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"ASSIGN\"]:\n                defs = defs.union(this.getAssignDefs(statement));\n                break;\n        }\n        return defs;\n    }\n    getClassDefs(classDecl) {\n        return new RefSet({\n            type: SymbolType.CLASS,\n            level: ReferenceType.DEFINITION,\n            name: classDecl.name,\n            location: classDecl.location,\n            node: classDecl,\n        });\n    }\n    getFuncDefs(funcDecl, defsForMethodResolution) {\n        runAnalysis(ParameterSideEffectAnalysis, defsForMethodResolution, funcDecl, this._symbolTable);\n        return new RefSet({\n            type: SymbolType.FUNCTION,\n            level: ReferenceType.DEFINITION,\n            name: funcDecl.name,\n            location: funcDecl.location,\n            node: funcDecl,\n        });\n    }\n    getAssignDefs(assign) {\n        let targetsDefListener = new TargetsDefListener(assign, this._symbolTable);\n        return targetsDefListener.defs;\n    }\n    getImportFromDefs(from) {\n        this._symbolTable.importModuleDefinitions(from.base, from.imports);\n        return new RefSet(...from.imports.map(i => {\n            return {\n                type: SymbolType.IMPORT,\n                level: ReferenceType.DEFINITION,\n                name: i.name || i.path,\n                location: i.location,\n                node: from,\n            };\n        }));\n    }\n    getImportDefs(imprt) {\n        imprt.names.forEach(imp => {\n            const spec = this._symbolTable.importModule(imp.path, imp.name);\n        });\n        return new RefSet(...imprt.names.map(nameNode => {\n            return {\n                type: SymbolType.IMPORT,\n                level: ReferenceType.DEFINITION,\n                name: nameNode.name || nameNode.path,\n                location: nameNode.location,\n                node: imprt,\n            };\n        }));\n    }\n    getUses(statement) {\n        switch (statement.type) {\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"ASSIGN\"]:\n                return this.getAssignUses(statement);\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DEF\"]:\n                return this.getFuncDeclUses(statement);\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"CLASS\"]:\n                return this.getClassDeclUses(statement);\n            default: {\n                return this.getNameUses(statement);\n            }\n        }\n    }\n    getNameUses(statement) {\n        const usedNames = gatherNames(statement);\n        return new RefSet(...usedNames.items.map(([name, node]) => {\n            return {\n                type: SymbolType.VARIABLE,\n                level: ReferenceType.USE,\n                name: name,\n                location: node.location,\n                node: statement,\n            };\n        }));\n    }\n    getClassDeclUses(classDecl) {\n        return classDecl.code.reduce((uses, classStatement) => uses.union(this.getUses(classStatement)), new RefSet());\n    }\n    getFuncDeclUses(def) {\n        let defCfg = new _control_flow__WEBPACK_IMPORTED_MODULE_1__[\"ControlFlowGraph\"](def);\n        let undefinedRefs = this.analyze(defCfg, getParameterRefs(def)).undefinedRefs;\n        return undefinedRefs.filter(r => r.level == ReferenceType.USE);\n    }\n    getAssignUses(assign) {\n        // XXX: Is this supposed to union with funcArgs?\n        const targetNames = gatherNames(assign.targets);\n        const targets = new RefSet(...targetNames.items.map(([name, node]) => {\n            return {\n                type: SymbolType.VARIABLE,\n                level: ReferenceType.USE,\n                name: name,\n                location: node.location,\n                node: assign,\n            };\n        }));\n        const sourceNames = gatherNames(assign.sources);\n        const sources = new RefSet(...sourceNames.items.map(([name, node]) => {\n            return {\n                type: SymbolType.VARIABLE,\n                level: ReferenceType.USE,\n                name: name,\n                location: node.location,\n                node: assign,\n            };\n        }));\n        return sources.union(assign.op ? targets : new RefSet());\n    }\n}\nvar ReferenceType;\n(function (ReferenceType) {\n    ReferenceType[\"DEFINITION\"] = \"DEFINITION\";\n    ReferenceType[\"UPDATE\"] = \"UPDATE\";\n    ReferenceType[\"USE\"] = \"USE\";\n})(ReferenceType || (ReferenceType = {}));\nvar SymbolType;\n(function (SymbolType) {\n    SymbolType[SymbolType[\"VARIABLE\"] = 0] = \"VARIABLE\";\n    SymbolType[SymbolType[\"CLASS\"] = 1] = \"CLASS\";\n    SymbolType[SymbolType[\"FUNCTION\"] = 2] = \"FUNCTION\";\n    SymbolType[SymbolType[\"IMPORT\"] = 3] = \"IMPORT\";\n    SymbolType[SymbolType[\"MUTATION\"] = 4] = \"MUTATION\";\n    SymbolType[SymbolType[\"MAGIC\"] = 5] = \"MAGIC\";\n})(SymbolType || (SymbolType = {}));\nclass RefSet extends _set__WEBPACK_IMPORTED_MODULE_2__[\"Set\"] {\n    constructor(...items) {\n        super(r => r.name + r.level + _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"locationString\"](r.location), ...items);\n    }\n}\nfunction sameLocation(loc1, loc2) {\n    return (loc1.first_column === loc2.first_column &&\n        loc1.first_line === loc2.first_line &&\n        loc1.last_column === loc2.last_column &&\n        loc1.last_line === loc2.last_line);\n}\nfunction getNameSetId([name, node]) {\n    if (!node.location)\n        console.log('***', node);\n    return `${name}@${_python_parser__WEBPACK_IMPORTED_MODULE_0__[\"locationString\"](node.location)}`;\n}\nclass NameSet extends _set__WEBPACK_IMPORTED_MODULE_2__[\"Set\"] {\n    constructor(...items) {\n        super(getNameSetId, ...items);\n    }\n}\nfunction gatherNames(node) {\n    if (Array.isArray(node)) {\n        return new NameSet().union(...node.map(gatherNames));\n    }\n    else {\n        return new NameSet(..._python_parser__WEBPACK_IMPORTED_MODULE_0__[\"walk\"](node)\n            .filter(e => e.type == _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"])\n            .map((e) => [e.id, e]));\n    }\n}\nclass AnalysisWalker {\n    constructor(_statement, symbolTable) {\n        this._statement = _statement;\n        this.symbolTable = symbolTable;\n        this.defs = new RefSet();\n    }\n}\nfunction runAnalysis(Analysis, defsForMethodResolution, statement, symbolTable) {\n    const walker = new Analysis(statement, symbolTable, defsForMethodResolution);\n    _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"walk\"](statement, walker);\n    return walker.defs;\n}\n/**\n * Tree walk listener for collecting manual def annotations.\n */\nclass DefAnnotationAnalysis extends AnalysisWalker {\n    constructor(statement, symbolTable) {\n        super(statement, symbolTable);\n    }\n    onEnterNode(node) {\n        if (node.type == _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"LITERAL\"]) {\n            let literal = node;\n            // If this is a string, try to parse a def annotation from it\n            if (typeof literal.value == 'string' || literal.value instanceof String) {\n                let string = literal.value;\n                let jsonMatch = string.match(/\"defs: (.*)\"/);\n                if (jsonMatch && jsonMatch.length >= 2) {\n                    let jsonString = jsonMatch[1];\n                    let jsonStringUnescaped = jsonString.replace(/\\\\\"/g, '\"');\n                    try {\n                        let defSpecs = JSON.parse(jsonStringUnescaped);\n                        for (let defSpec of defSpecs) {\n                            this.defs.add({\n                                type: SymbolType.MAGIC,\n                                level: ReferenceType.DEFINITION,\n                                name: defSpec.name,\n                                location: {\n                                    first_line: defSpec.pos[0][0] + node.location.first_line,\n                                    first_column: defSpec.pos[0][1],\n                                    last_line: defSpec.pos[1][0] + node.location.first_line,\n                                    last_column: defSpec.pos[1][1],\n                                },\n                                node: this._statement,\n                            });\n                        }\n                    }\n                    catch (e) { }\n                }\n            }\n        }\n    }\n}\n/**\n * Tree walk listener for collecting names used in function call.\n */\nclass ApiCallAnalysis extends AnalysisWalker {\n    constructor(statement, symbolTable, variableDefs) {\n        super(statement, symbolTable);\n        this.variableDefs = variableDefs;\n    }\n    onEnterNode(node, ancestors) {\n        if (node.type !== _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"CALL\"]) {\n            return;\n        }\n        let funcSpec;\n        const func = node.func;\n        if (func.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DOT\"] && func.value.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"]) {\n            // It's a method call or module call.\n            const receiver = func.value;\n            const moduleSpec = this.symbolTable.modules[receiver.id];\n            if (moduleSpec) {\n                // It's a module call.\n                funcSpec = moduleSpec.functions.find(f => f.name === func.name);\n            }\n            else {\n                // It's a method call.\n                const ref = this.variableDefs.items.find(r => r.name === receiver.id);\n                if (ref) {\n                    // The lefthand side of the dot is a variable we're tracking, so it's a method call.\n                    const receiverType = ref.inferredType;\n                    if (receiverType) {\n                        const funcName = func.name;\n                        funcSpec = receiverType.methods.find(m => m.name === funcName);\n                    }\n                }\n            }\n        }\n        else if (func.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"]) {\n            // It's a function call.\n            funcSpec = this.symbolTable.lookupFunction(func.id);\n        }\n        if (funcSpec && funcSpec.updates) {\n            funcSpec.updates.forEach(paramName => {\n                const position = typeof paramName === 'string' ? parseInt(paramName) : paramName;\n                if (isNaN(position)) {\n                    return;\n                } // TODO: think about mutation of global variables\n                let actualArgName;\n                if (0 < position && position - 1 < node.args.length) {\n                    const arg = node.args[position - 1].actual;\n                    if (arg.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"]) {\n                        actualArgName = arg.id;\n                    }\n                }\n                else if (position === 0 && node.func.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DOT\"] && node.func.value.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"]) {\n                    actualArgName = node.func.value.id;\n                }\n                if (actualArgName) {\n                    this.defs.add({\n                        type: SymbolType.MUTATION,\n                        level: ReferenceType.UPDATE,\n                        name: actualArgName,\n                        location: node.location,\n                        node: this._statement,\n                    });\n                }\n            });\n        }\n        else {\n            // Be conservative. If we don't know what the call does, assume that it mutates its arguments.\n            node.args.forEach(arg => {\n                if (arg.actual.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"]) {\n                    const name = arg.actual.id;\n                    this.defs.add({\n                        type: SymbolType.MUTATION,\n                        level: ReferenceType.UPDATE,\n                        name: name,\n                        location: node.location,\n                        node: this._statement,\n                    });\n                }\n            });\n            if (node.func.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DOT\"] && node.func.value.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"]) {\n                const name = node.func.value.id;\n                this.defs.add({\n                    type: SymbolType.MUTATION,\n                    level: ReferenceType.UPDATE,\n                    name: name,\n                    location: node.location,\n                    node: this._statement,\n                });\n            }\n        }\n    }\n}\n/**\n * Tree walk listener for collecting definitions in the target of an assignment.\n */\nclass TargetsDefListener extends AnalysisWalker {\n    constructor(assign, symbolTable) {\n        super(assign, symbolTable);\n        this.isAugAssign = !!assign.op;\n        if (assign.targets) {\n            for (let target of assign.targets) {\n                _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"walk\"](target, this);\n            }\n        }\n        assign.sources.forEach((source, i) => {\n            if (source.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"CALL\"]) {\n                const spec = symbolTable.lookupNode(source.func);\n                const target = assign.targets[i];\n                if (spec && target && target.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"]) {\n                    const def = this.defs.items.find(d => d.name === target.id);\n                    if (def) {\n                        def.inferredType = spec.returnsType;\n                    }\n                }\n            }\n        });\n    }\n    onEnterNode(target, ancestors) {\n        if (target.type == _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"]) {\n            if (ancestors.length > 1) {\n                const parent = ancestors[0];\n                if (parent.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"INDEX\"] && parent.args.some(a => a === target)) {\n                    return; // target not defined here. For example, i is not defined in A[i]\n                }\n            }\n            const isUpdate = this.isAugAssign || ancestors.some(a => a.type == _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DOT\"] || a.type == _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"INDEX\"]);\n            this.defs.add({\n                type: SymbolType.VARIABLE,\n                level: isUpdate ? ReferenceType.UPDATE : ReferenceType.DEFINITION,\n                location: target.location,\n                name: target.id,\n                node: this._statement,\n            });\n        }\n    }\n}\nclass ParameterSideEffectAnalysis extends AnalysisWalker {\n    constructor(def, symbolTable) {\n        super(def, symbolTable);\n        this.def = def;\n        const cfg = new _control_flow__WEBPACK_IMPORTED_MODULE_1__[\"ControlFlowGraph\"](def);\n        this.flows = new DataflowAnalyzer().analyze(cfg, getParameterRefs(def)).dataflows;\n        this.flows = this.getTransitiveClosure(this.flows);\n        this.symbolTable.functions[def.name] = this.spec = { name: def.name, updates: [] };\n    }\n    getTransitiveClosure(flows) {\n        const nodes = flows.map(getNodeId, df => df.fromNode).union(flows.map(getNodeId, df => df.toNode));\n        const result = new _set__WEBPACK_IMPORTED_MODULE_2__[\"Set\"](getDataflowId, ...flows.items);\n        nodes.items.forEach(from => nodes.items.forEach(to => nodes.items.forEach(middle => {\n            if (flows.has({ fromNode: from, toNode: middle }) &&\n                flows.has({ fromNode: middle, toNode: to })) {\n                result.add({ fromNode: from, toNode: to });\n            }\n        })));\n        return result;\n    }\n    checkParameterFlow(sideEffect) {\n        this.def.params.forEach((parm, i) => {\n            // For a method, the first parameter is self, which we assign 0. The other parameters are numbered from 1.\n            // For a function def, the parameters are numbered from 1.\n            const parmNum = this.isMethod ? i : i + 1;\n            if (this.flows.has({ fromNode: parm, toNode: sideEffect }) && this.spec.updates.indexOf(parmNum) < 0) {\n                this.spec.updates.push(parmNum);\n            }\n        });\n    }\n    onEnterNode(statement, ancestors) {\n        switch (statement.type) {\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"ASSIGN\"]:\n                for (let target of statement.targets) {\n                    if (target.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DOT\"]) {\n                        this.checkParameterFlow(statement);\n                    }\n                    else if (target.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"INDEX\"]) {\n                        this.checkParameterFlow(statement);\n                    }\n                }\n                break;\n            case _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"CALL\"]:\n                const funcSpec = this.symbolTable.lookupNode(statement.func);\n                const actuals = statement.args.map(a => a.actual);\n                this.def.params.forEach((param, i) => {\n                    // For a method, the first parameter is self, which we assign 0. The other parameters are numbered from 1.\n                    // For a function def, the parameters are numbered from 1.\n                    const paramNum = this.isMethod ? i : i + 1;\n                    if (funcSpec) {\n                        // If we have a spec, see if the parameter is passed as an actual that's side-effected.\n                        const paramFlows = this.flows.filter(f => f.fromNode === param && f.toNode === statement && f.toRef !== undefined);\n                        const updates = funcSpec.updates.filter(u => typeof u === 'number');\n                        if (updates.length > 0 && !paramFlows.empty && this.spec.updates.indexOf(paramNum) < 0) {\n                            paramFlows.items.forEach(pf => {\n                                if (updates.find(i => i > 0 && _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"walk\"](actuals[i - 1]).find(a => a.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"] && a.id === pf.toRef.name))) {\n                                    this.spec.updates.push(paramNum);\n                                }\n                                else if (updates.indexOf(0) >= 0 && statement.func.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DOT\"] && statement.func.value.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"] && statement.func.value.id === pf.toRef.name) {\n                                    this.spec.updates.push(0);\n                                }\n                            });\n                        }\n                    }\n                    else {\n                        // No spec, be conservative and assume this parameter is side-effected.\n                        this.spec.updates.push(paramNum);\n                    }\n                });\n                break;\n        }\n    }\n}\nfunction getParameterRefs(def) {\n    return new RefSet(...def.params.map(p => ({ name: p.name, level: ReferenceType.DEFINITION, type: SymbolType.VARIABLE, location: p.location, node: p })));\n}\nfunction getNodeId(node) {\n    return `${_python_parser__WEBPACK_IMPORTED_MODULE_0__[\"locationString\"](node.location)}`;\n}\nfunction getDataflowId(df) {\n    if (!df.fromNode.location) {\n        console.log('*** FROM', df.fromNode, df.fromNode.location);\n    }\n    if (!df.toNode.location) {\n        console.log('*** TO', df.toNode, df.toNode.location);\n    }\n    return `${getNodeId(df.fromNode)}->${getNodeId(df.toNode)}`;\n}\n\n\n//# sourceURL=webpack:///./src/data-flow.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! exports provided: Set, StringSet, NumberSet, range, parse, locationString, locationContains, MODULE, IMPORT, FROM, DECORATOR, DECORATE, DEF, PARAMETER, ASSIGN, ASSERT, PASS, RETURN, YIELD, RAISE, BREAK, CONTINUE, GLOBAL, NONLOCAL, IF, WHILE, ELSE, FOR, COMPFOR, COMPIF, TRY, WITH, CALL, ARG, INDEX, SLICE, DOT, IFEXPR, LAMBDA, UNOP, BINOP, STARRED, TUPLE, LIST, SET, DICT, NAME, LITERAL, CLASS, isEquivalent, flatten, walk, Block, ControlFlowGraph, DataflowAnalyzer, ReferenceType, SymbolType, RefSet, sameLocation, printNode, DefaultSpecs, LocationSet, SliceDirection, slice, sliceLines, CellSlice, CellExecution, SlicedExecution, ExecutionLogSlicer, Program, CellProgram, ProgramBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./set */ \"./src/set.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Set\", function() { return _set__WEBPACK_IMPORTED_MODULE_0__[\"Set\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"StringSet\", function() { return _set__WEBPACK_IMPORTED_MODULE_0__[\"StringSet\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NumberSet\", function() { return _set__WEBPACK_IMPORTED_MODULE_0__[\"NumberSet\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"range\", function() { return _set__WEBPACK_IMPORTED_MODULE_0__[\"range\"]; });\n\n/* harmony import */ var _python_parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./python-parser */ \"./src/python-parser.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"parse\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"locationString\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"locationString\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"locationContains\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"locationContains\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"MODULE\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"MODULE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"IMPORT\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"IMPORT\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FROM\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"FROM\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DECORATOR\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"DECORATOR\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DECORATE\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"DECORATE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DEF\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"DEF\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PARAMETER\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"PARAMETER\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ASSIGN\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"ASSIGN\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ASSERT\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"ASSERT\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"PASS\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"PASS\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RETURN\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"RETURN\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"YIELD\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"YIELD\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RAISE\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"RAISE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BREAK\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"BREAK\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CONTINUE\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"CONTINUE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"GLOBAL\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"GLOBAL\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NONLOCAL\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"NONLOCAL\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"IF\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"IF\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"WHILE\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"WHILE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ELSE\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"ELSE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"FOR\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"FOR\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"COMPFOR\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"COMPFOR\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"COMPIF\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"COMPIF\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TRY\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"TRY\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"WITH\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"WITH\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CALL\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"CALL\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ARG\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"ARG\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"INDEX\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"INDEX\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SLICE\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"SLICE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DOT\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"DOT\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"IFEXPR\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"IFEXPR\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LAMBDA\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"LAMBDA\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"UNOP\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"UNOP\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"BINOP\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"BINOP\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"STARRED\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"STARRED\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"TUPLE\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"TUPLE\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LIST\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"LIST\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SET\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"SET\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DICT\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"DICT\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"NAME\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"NAME\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LITERAL\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"LITERAL\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CLASS\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"CLASS\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"isEquivalent\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"isEquivalent\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"flatten\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"flatten\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"walk\", function() { return _python_parser__WEBPACK_IMPORTED_MODULE_1__[\"walk\"]; });\n\n/* harmony import */ var _control_flow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./control-flow */ \"./src/control-flow.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Block\", function() { return _control_flow__WEBPACK_IMPORTED_MODULE_2__[\"Block\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ControlFlowGraph\", function() { return _control_flow__WEBPACK_IMPORTED_MODULE_2__[\"ControlFlowGraph\"]; });\n\n/* harmony import */ var _data_flow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data-flow */ \"./src/data-flow.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DataflowAnalyzer\", function() { return _data_flow__WEBPACK_IMPORTED_MODULE_3__[\"DataflowAnalyzer\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ReferenceType\", function() { return _data_flow__WEBPACK_IMPORTED_MODULE_3__[\"ReferenceType\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SymbolType\", function() { return _data_flow__WEBPACK_IMPORTED_MODULE_3__[\"SymbolType\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"RefSet\", function() { return _data_flow__WEBPACK_IMPORTED_MODULE_3__[\"RefSet\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sameLocation\", function() { return _data_flow__WEBPACK_IMPORTED_MODULE_3__[\"sameLocation\"]; });\n\n/* harmony import */ var _printNode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./printNode */ \"./src/printNode.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"printNode\", function() { return _printNode__WEBPACK_IMPORTED_MODULE_4__[\"printNode\"]; });\n\n/* harmony import */ var _specs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./specs */ \"./src/specs/index.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"DefaultSpecs\", function() { return _specs__WEBPACK_IMPORTED_MODULE_5__[\"DefaultSpecs\"]; });\n\n/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./slice */ \"./src/slice.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"LocationSet\", function() { return _slice__WEBPACK_IMPORTED_MODULE_6__[\"LocationSet\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SliceDirection\", function() { return _slice__WEBPACK_IMPORTED_MODULE_6__[\"SliceDirection\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"slice\", function() { return _slice__WEBPACK_IMPORTED_MODULE_6__[\"slice\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"sliceLines\", function() { return _slice__WEBPACK_IMPORTED_MODULE_6__[\"sliceLines\"]; });\n\n/* harmony import */ var _cellslice__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cellslice */ \"./src/cellslice.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CellSlice\", function() { return _cellslice__WEBPACK_IMPORTED_MODULE_7__[\"CellSlice\"]; });\n\n/* harmony import */ var _log_slicer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./log-slicer */ \"./src/log-slicer.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CellExecution\", function() { return _log_slicer__WEBPACK_IMPORTED_MODULE_8__[\"CellExecution\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"SlicedExecution\", function() { return _log_slicer__WEBPACK_IMPORTED_MODULE_8__[\"SlicedExecution\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ExecutionLogSlicer\", function() { return _log_slicer__WEBPACK_IMPORTED_MODULE_8__[\"ExecutionLogSlicer\"]; });\n\n/* harmony import */ var _program_builder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./program-builder */ \"./src/program-builder.ts\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"Program\", function() { return _program_builder__WEBPACK_IMPORTED_MODULE_9__[\"Program\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CellProgram\", function() { return _program_builder__WEBPACK_IMPORTED_MODULE_9__[\"CellProgram\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"ProgramBuilder\", function() { return _program_builder__WEBPACK_IMPORTED_MODULE_9__[\"ProgramBuilder\"]; });\n\n/* empty/unused harmony star reexport */\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ }),

/***/ "./src/log-slicer.ts":
/*!***************************!*\
  !*** ./src/log-slicer.ts ***!
  \***************************/
/*! exports provided: CellExecution, SlicedExecution, ExecutionLogSlicer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CellExecution\", function() { return CellExecution; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SlicedExecution\", function() { return SlicedExecution; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ExecutionLogSlicer\", function() { return ExecutionLogSlicer; });\n/* harmony import */ var _cellslice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cellslice */ \"./src/cellslice.ts\");\n/* harmony import */ var _program_builder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./program-builder */ \"./src/program-builder.ts\");\n/* harmony import */ var _slice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./slice */ \"./src/slice.ts\");\n/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./set */ \"./src/set.ts\");\n\n\n\n\n/**\n * A record of when a cell was executed.\n */\nclass CellExecution {\n    constructor(cell, executionTime) {\n        this.cell = cell;\n        this.executionTime = executionTime;\n    }\n    /**\n     * Update this method if at some point we only want to save some about a CellExecution when\n     * serializing it and saving history.\n     */\n    toJSON() {\n        return JSON.parse(JSON.stringify(this));\n    }\n}\n/**\n * A slice over a version of executed code.\n */\nclass SlicedExecution {\n    constructor(executionTime, cellSlices) {\n        this.executionTime = executionTime;\n        this.cellSlices = cellSlices;\n    }\n    merge(...slicedExecutions) {\n        let cellSlices = {};\n        let mergedCellSlices = [];\n        for (let slicedExecution of slicedExecutions.concat(this)) {\n            for (let cellSlice of slicedExecution.cellSlices) {\n                let cell = cellSlice.cell;\n                if (!cellSlices[cell.executionEventId]) {\n                    let newCellSlice = new _cellslice__WEBPACK_IMPORTED_MODULE_0__[\"CellSlice\"](cell.deepCopy(), new _slice__WEBPACK_IMPORTED_MODULE_2__[\"LocationSet\"](), cellSlice.executionTime);\n                    cellSlices[cell.executionEventId] = newCellSlice;\n                    mergedCellSlices.push(newCellSlice);\n                }\n                let mergedCellSlice = cellSlices[cell.executionEventId];\n                mergedCellSlice.slice = mergedCellSlice.slice.union(cellSlice.slice);\n            }\n        }\n        return new SlicedExecution(new Date(), // Date doesn't mean anything for the merged slice.\n        mergedCellSlices.sort((a, b) => a.cell.executionCount - b.cell.executionCount));\n    }\n}\n/**\n * Makes slice on a log of executed cells.\n */\nclass ExecutionLogSlicer {\n    /**\n     * Construct a new execution log slicer.\n     */\n    constructor(dataflowAnalyzer) {\n        this.dataflowAnalyzer = dataflowAnalyzer;\n        this.executionLog = [];\n        /**\n         * Signal emitted when a cell's execution has been completely processed.\n         */\n        this.executionLogged = [];\n        this.programBuilder = new _program_builder__WEBPACK_IMPORTED_MODULE_1__[\"ProgramBuilder\"](dataflowAnalyzer);\n    }\n    /**\n     * Log that a cell has just been executed. The execution time for this cell will be stored\n     * as the moment at which this method is called.\n     */\n    logExecution(cell) {\n        let cellExecution = new CellExecution(cell, new Date());\n        this.addExecutionToLog(cellExecution);\n    }\n    /**\n     * Use logExecution instead if a cell has just been run to annotate it with the current time\n     * as the execution time. This function is intended to be used only to initialize history\n     * when a notebook is reloaded. However, any method that eventually calls this method will\n     * notify all observers that this cell has been executed.\n     */\n    addExecutionToLog(cellExecution) {\n        this.programBuilder.add(cellExecution.cell);\n        this.executionLog.push(cellExecution);\n        this.executionLogged.forEach(callback => callback(cellExecution));\n    }\n    /**\n     * Reset the log, removing log records.\n     */\n    reset() {\n        this.executionLog = [];\n        this.programBuilder.reset();\n    }\n    /**\n     * Get slice for the latest execution of a cell.\n     */\n    sliceLatestExecution(cellId, seedLocations) {\n        // XXX: This computes more than it has to, performing a slice on each execution of a cell\n        // instead of just its latest computation. Optimize later if necessary.\n        return this.sliceAllExecutions(cellId, seedLocations).pop();\n    }\n    /**\n     * Get slices of the necessary code for all executions of a cell.\n     * Relevant line numbers are relative to the cell's start line (starting at first line = 0).\n     */\n    sliceAllExecutions(cellId, seedLocations) {\n        // Make a map from cells to their execution times.\n        const cellExecutionTimes = new Map(this.executionLog.map(e => [e.cell.executionEventId, e.executionTime]));\n        return this.executionLog\n            .filter(execution => execution.cell.persistentId == cellId &&\n            execution.cell.executionCount)\n            .map(execution => {\n            // Build the program up to that cell.\n            let program = this.programBuilder.buildTo(execution.cell.executionEventId);\n            if (!program) {\n                return null;\n            }\n            // Set the seed locations for the slice.\n            if (!seedLocations) {\n                // If seed locations weren't specified, slice the whole cell.\n                // XXX: Whole cell specified by an unreasonably large character range.\n                seedLocations = new _slice__WEBPACK_IMPORTED_MODULE_2__[\"LocationSet\"]({\n                    first_line: 1,\n                    first_column: 1,\n                    last_line: 10000,\n                    last_column: 10000,\n                });\n            }\n            // Set seed locations were specified relative to the last cell's position in program.\n            let lastCellLines = program.cellToLineMap[execution.cell.executionEventId];\n            let lastCellStart = Math.min(...lastCellLines.items);\n            seedLocations = seedLocations.mapSame(loc => ({\n                first_line: lastCellStart + loc.first_line - 1,\n                first_column: loc.first_column,\n                last_line: lastCellStart + loc.last_line - 1,\n                last_column: loc.last_column,\n            }));\n            // Slice the program\n            let sliceLocations = Object(_slice__WEBPACK_IMPORTED_MODULE_2__[\"slice\"])(program.tree, seedLocations, this.dataflowAnalyzer).items.sort((loc1, loc2) => loc1.first_line - loc2.first_line);\n            // Get the relative offsets of slice lines in each cell.\n            let cellSliceLocations = {};\n            let cellOrder = [];\n            sliceLocations.forEach(location => {\n                let sliceCell = program.lineToCellMap[location.first_line];\n                let sliceCellLines = program.cellToLineMap[sliceCell.executionEventId];\n                let sliceCellStart = Math.min(...sliceCellLines.items);\n                if (cellOrder.indexOf(sliceCell) == -1) {\n                    cellOrder.push(sliceCell);\n                }\n                let adjustedLocation = {\n                    first_line: location.first_line - sliceCellStart + 1,\n                    first_column: location.first_column,\n                    last_line: location.last_line - sliceCellStart + 1,\n                    last_column: location.last_column,\n                };\n                if (!cellSliceLocations[sliceCell.executionEventId]) {\n                    cellSliceLocations[sliceCell.executionEventId] = new _slice__WEBPACK_IMPORTED_MODULE_2__[\"LocationSet\"]();\n                }\n                cellSliceLocations[sliceCell.executionEventId].add(adjustedLocation);\n            });\n            let cellSlices = cellOrder.map(sliceCell => new _cellslice__WEBPACK_IMPORTED_MODULE_0__[\"CellSlice\"](sliceCell, cellSliceLocations[sliceCell.executionEventId], cellExecutionTimes[sliceCell.executionEventId]));\n            return new SlicedExecution(execution.executionTime, cellSlices);\n        })\n            .filter(s => s != null && s != undefined);\n    }\n    get cellExecutions() {\n        return this.executionLog;\n    }\n    /**\n     * Get the cell program (tree, defs, uses) for a cell.\n     */\n    getCellProgram(executionEventId) {\n        return this.programBuilder.getCellProgram(executionEventId);\n    }\n    /**\n     * Returns the cells that directly or indirectly use variables\n     * that are defined in the given cell. Result is in\n     * topological order.\n     * @param executionEventId a cell in the log\n     */\n    getDependentCells(executionEventId) {\n        const program = this.programBuilder.buildFrom(executionEventId);\n        const sameCell = this.programBuilder.getCellProgramsWithSameId(executionEventId);\n        let lines = new _set__WEBPACK_IMPORTED_MODULE_3__[\"NumberSet\"]();\n        sameCell.forEach(cp => lines = lines.union(program.cellToLineMap[cp.cell.executionEventId]));\n        const seedLocations = new _slice__WEBPACK_IMPORTED_MODULE_2__[\"LocationSet\"](...lines.items.map(line => ({ first_line: line, first_column: 0, last_line: line, last_column: 1 })));\n        let sliceLocations = Object(_slice__WEBPACK_IMPORTED_MODULE_2__[\"slice\"])(program.tree, seedLocations, undefined, _slice__WEBPACK_IMPORTED_MODULE_2__[\"SliceDirection\"].Forward).items;\n        return new _set__WEBPACK_IMPORTED_MODULE_3__[\"Set\"](c => c.persistentId, ...sliceLocations.map(loc => program.lineToCellMap[loc.first_line]))\n            .items.filter(c => c.executionEventId !== executionEventId);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/log-slicer.ts?");

/***/ }),

/***/ "./src/printNode.ts":
/*!**************************!*\
  !*** ./src/printNode.ts ***!
  \**************************/
/*! exports provided: printNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"printNode\", function() { return printNode; });\nconst comma = ', ';\n// tslint:disable-next-line: max-func-body-length\nfunction printTabbed(node, tabLevel) {\n    const tabs = ' '.repeat(4 * tabLevel);\n    switch (node.type) {\n        case 'assert':\n            return tabs + 'assert ' + printNode(node.cond);\n        case 'assign':\n            return (tabs +\n                commaSep(node.targets) +\n                ' ' +\n                (node.op || '=') +\n                ' ' +\n                commaSep(node.sources));\n        case 'binop':\n            return '(' + printNode(node.left) + node.op + printNode(node.right) + ')';\n        case 'break':\n            return tabs + 'break';\n        case 'call':\n            return printNode(node.func) + '(' + node.args.map(printArg) + ')';\n        case 'class':\n            return (tabs +\n                'class ' +\n                node.name +\n                (node.extends ? '(' + commaSep(node.extends) + ')' : '') +\n                ':' +\n                lines(node.code, tabLevel + 1));\n        case 'comp_for':\n        case 'comp_if':\n            throw 'not implemented';\n        case 'continue':\n            return tabs + 'continue';\n        case 'decorator':\n            return ('@' +\n                node.decorator +\n                (node.args ? '(' + commaSep(node.args) + ')' : ''));\n        case 'decorate':\n            return (tabs +\n                lines(node.decorators, tabLevel) +\n                printTabbed(node.def, tabLevel));\n        case 'def':\n            return (tabs +\n                'def ' +\n                node.name +\n                '(' +\n                node.params.map(printParam).join(comma) +\n                '):' +\n                lines(node.code, tabLevel + 1));\n        case 'dict':\n            return '{' + node.entries.map(e => e.k + ':' + e.v) + '}';\n        case 'dot':\n            return printNode(node.value) + '.' + node.name;\n        case 'else':\n            return tabs + 'else:' + lines(node.code, tabLevel + 1);\n        case 'for':\n            return (tabs +\n                'for ' +\n                commaSep(node.target) +\n                ' in ' +\n                commaSep(node.iter) +\n                ':' +\n                lines(node.code, tabLevel + 1) +\n                (node.else ? lines(node.else, tabLevel + 1) : ''));\n        case 'from':\n            return (tabs +\n                'from ' +\n                node.base +\n                ' import ' +\n                node.imports\n                    .map(im => im.path + (im.name ? ' as ' + im.name : ''))\n                    .join(comma));\n        case 'global':\n            return tabs + 'global ' + node.names.join(comma);\n        case 'if':\n            return (tabs +\n                'if ' +\n                printNode(node.cond) +\n                ':' +\n                lines(node.code, tabLevel + 1) +\n                (node.elif\n                    ? node.elif.map(elif => tabs +\n                        'elif ' +\n                        elif.cond +\n                        ':' +\n                        lines(elif.code, tabLevel + 1))\n                    : '') +\n                (node.else ? tabs + 'else:' + lines(node.else.code, tabLevel + 1) : ''));\n        case 'ifexpr':\n            return (printNode(node.then) +\n                ' if ' +\n                printNode(node.test) +\n                ' else ' +\n                printNode(node.else));\n        case 'import':\n            return (tabs +\n                'import ' +\n                node.names\n                    .map(n => n.path + (n.name ? ' as ' + n.name : ''))\n                    .join(comma));\n        case 'index':\n            return printNode(node.value) + '[' + commaSep(node.args) + ']';\n        case 'lambda':\n            return ('lambda ' +\n                node.args.map(printParam).join(comma) +\n                ': ' +\n                printNode(node.code));\n        case 'list':\n            return '[' + node.items.map(item => printNode(item)).join(comma) + ']';\n        case 'literal':\n            return typeof node.value === 'string' && node.value.indexOf('\\n') >= 0\n                ? '\"\"' + node.value + '\"\"'\n                : node.value.toString();\n        case 'module':\n            return lines(node.code, tabLevel);\n        case 'name':\n            return node.id;\n        case 'nonlocal':\n            return tabs + 'nonlocal ' + node.names.join(comma);\n        case 'raise':\n            return tabs + 'raise ' + printNode(node.err);\n        case 'return':\n            return tabs + 'return ' + (node.values ? commaSep(node.values) : '');\n        case 'set':\n            return '{' + commaSep(node.entries) + '}';\n        case 'slice':\n            return ((node.start ? printNode(node.start) : '') +\n                ':' +\n                (node.stop ? printNode(node.stop) : '') +\n                (node.step ? ':' + printNode(node.step) : ''));\n        case 'starred':\n            return '*' + printNode(node.value);\n        case 'try':\n            return (tabs +\n                'try:' +\n                lines(node.code, tabLevel + 1) +\n                (node.excepts\n                    ? node.excepts.map(ex => tabs +\n                        'except ' +\n                        (ex.cond\n                            ? printNode(ex.cond) + (ex.name ? ' as ' + ex.name : '')\n                            : '') +\n                        ':' +\n                        lines(ex.code, tabLevel + 1))\n                    : '') +\n                (node.else ? tabs + 'else:' + lines(node.else, tabLevel + 1) : '') +\n                (node.finally\n                    ? tabs + 'finally:' + lines(node.finally, tabLevel + 1)\n                    : ''));\n        case 'tuple':\n            return '(' + commaSep(node.items) + ')';\n        case 'unop':\n            return node.op + '(' + printNode(node.operand) + ')';\n        case 'while':\n            return (tabs +\n                'while ' +\n                printNode(node.cond) +\n                ':' +\n                lines(node.code, tabLevel + 1));\n        case 'with':\n            return (tabs +\n                'with ' +\n                node.items.map(w => w.with + (w.as ? ' as ' + w.as : '')).join(comma) +\n                ':' +\n                lines(node.code, tabLevel + 1));\n        case 'yield':\n            return (tabs +\n                'yield ' +\n                (node.from ? printNode(node.from) : '') +\n                (node.value ? commaSep(node.value) : ''));\n    }\n}\nfunction printParam(param) {\n    return ((param.star ? '*' : '') +\n        (param.starstar ? '**' : '') +\n        param.name +\n        (param.default_value ? '=' + printNode(param.default_value) : '') +\n        (param.anno ? printNode(param.anno) : ''));\n}\nfunction printArg(arg) {\n    return ((arg.kwargs ? '**' : '') +\n        (arg.varargs ? '*' : '') +\n        (arg.keyword ? printNode(arg.keyword) + '=' : '') +\n        printNode(arg.actual) +\n        (arg.loop ? ' for ' + arg.loop.for + ' in ' + arg.loop.in : ''));\n}\nfunction commaSep(items) {\n    return items.map(printNode).join(comma);\n}\nfunction lines(items, tabLevel) {\n    return items\n        .map(i => printTabbed(i, tabLevel))\n        .join(tabLevel === 0 ? '\\n\\n' : '\\n'); // seperate top-level definitons with an extra newline\n}\nfunction printNode(node) {\n    return printTabbed(node, 0);\n}\n\n\n//# sourceURL=webpack:///./src/printNode.ts?");

/***/ }),

/***/ "./src/program-builder.ts":
/*!********************************!*\
  !*** ./src/program-builder.ts ***!
  \********************************/
/*! exports provided: Program, CellProgram, ProgramBuilder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Program\", function() { return Program; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CellProgram\", function() { return CellProgram; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ProgramBuilder\", function() { return ProgramBuilder; });\n/* harmony import */ var _python_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./python-parser */ \"./src/python-parser.ts\");\n/* harmony import */ var _data_flow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data-flow */ \"./src/data-flow.ts\");\n/* harmony import */ var _rewrite_magics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rewrite-magics */ \"./src/rewrite-magics.ts\");\n/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./set */ \"./src/set.ts\");\n\n\n\n\nconst magicsRewriter = new _rewrite_magics__WEBPACK_IMPORTED_MODULE_2__[\"MagicsRewriter\"]();\n/**\n * A program built from cells.\n */\nclass Program {\n    /**\n     * Construct a program.\n     */\n    constructor(cellPrograms) {\n        this.cellToLineMap = {};\n        this.lineToCellMap = {};\n        let currentLine = 1;\n        this.tree = { code: [], type: _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"MODULE\"] };\n        cellPrograms.forEach(cp => {\n            let cell = cp.cell;\n            // Build a mapping from the cells to their lines.\n            let cellLength = cell.text.split('\\n').length;\n            let cellLines = [];\n            for (let l = 0; l < cellLength; l++) {\n                cellLines.push(currentLine + l);\n            }\n            cellLines.forEach(l => {\n                this.lineToCellMap[l] = cell;\n                if (!this.cellToLineMap[cell.executionEventId]) {\n                    this.cellToLineMap[cell.executionEventId] = new _set__WEBPACK_IMPORTED_MODULE_3__[\"NumberSet\"]();\n                }\n                this.cellToLineMap[cell.executionEventId].add(l);\n            });\n            // Accumulate the code text.\n            currentLine += cellLength;\n            // Accumulate the code statements.\n            // This includes resetting the locations of all of the nodes in the tree,\n            // relative to the cells that come before this one.\n            // This can be sped up by saving this computation.\n            this.tree.code.push(...shiftStatementLines(cp.statements, Math.min(...cellLines) - 1));\n        });\n        this.text = cellPrograms.map(cp => magicsRewriter.rewrite(cp.cell.text + '\\n')).join('');\n    }\n}\nfunction shiftStatementLines(stmts, delta) {\n    return stmts.map(statement => {\n        let statementCopy = JSON.parse(JSON.stringify(statement));\n        for (let node of _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"walk\"](statementCopy)) {\n            if (node.location) {\n                node.location = shiftLines(node.location, delta);\n            }\n            if (node.type == _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"FOR\"]) {\n                node.decl_location = shiftLines(node.decl_location, delta);\n            }\n        }\n        return statementCopy;\n    });\n}\nfunction shiftLines(loc, delta) {\n    return Object.assign({}, loc, {\n        first_line: loc.first_line + delta,\n        first_column: loc.first_column,\n        last_line: loc.last_line + delta,\n        last_column: loc.last_column\n    });\n}\n/**\n * Program fragment for a cell. Used to cache parsing results.\n */\nclass CellProgram {\n    /**\n     * Construct a cell program\n     */\n    constructor(cell, statements, defs, uses, hasError) {\n        this.cell = cell;\n        this.statements = statements;\n        this.defs = defs;\n        this.uses = uses;\n        this.hasError = hasError;\n    }\n    usesSomethingFrom(that) {\n        return this.uses.some(use => that.defs.some(def => use.name === def.name));\n    }\n}\n/**\n * Builds programs from a list of executed cells.\n */\nclass ProgramBuilder {\n    /**\n     * Construct a program builder.\n     */\n    constructor(dataflowAnalyzer) {\n        this._dataflowAnalyzer = dataflowAnalyzer;\n        this._cellPrograms = [];\n    }\n    /**\n     * Add cells to the program builder.\n     */\n    add(...cells) {\n        for (let cell of cells) {\n            // Proactively try to parse and find defs and uses in each block.\n            // If there is a failure, discard that cell.\n            let statements = [];\n            let defs = undefined;\n            let uses = undefined;\n            let hasError = cell.hasError;\n            try {\n                // Parse the cell's code.\n                let tree = _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"parse\"](magicsRewriter.rewrite(cell.text) + '\\n');\n                statements = tree.code;\n                // Annotate each node with cell ID info, for dataflow caching.\n                for (let node of _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"walk\"](tree)) {\n                    // Sanity check that this is actually a node.\n                    if (node.hasOwnProperty('type')) {\n                        node.location.path = cell.executionEventId;\n                    }\n                }\n                // By querying for defs and uses right when a cell is added to the log, we\n                // can cache these results, making dataflow analysis faster.\n                if (this._dataflowAnalyzer) {\n                    defs = [];\n                    uses = [];\n                    for (let stmt of tree.code) {\n                        let defsUses = this._dataflowAnalyzer.getDefUseForStatement(stmt, new _data_flow__WEBPACK_IMPORTED_MODULE_1__[\"RefSet\"]());\n                        defs.push(...defsUses.DEFINITION.union(defsUses.UPDATE).items);\n                        uses.push(...defsUses.USE.items);\n                    }\n                }\n                else {\n                    defs = [];\n                    uses = [];\n                }\n            }\n            catch (e) {\n                console.log(\"Couldn't analyze block\", cell.text, ', error encountered, ', e, ', not adding to programs.');\n                hasError = true;\n            }\n            this._cellPrograms.push(new CellProgram(cell, statements, defs, uses, hasError));\n        }\n    }\n    /**\n     * Reset (removing all cells).\n     */\n    reset() {\n        this._cellPrograms = [];\n    }\n    /**\n     * Build a program from the list of cells. Program will include the cells' contents in\n     * the order they were added to the log. It will omit cells that raised errors (syntax or\n     * runtime, except for the last cell).\n     */\n    buildTo(cellExecutionEventId) {\n        let cellPrograms = [];\n        let i;\n        for (i = this._cellPrograms.length - 1; i >= 0 && this._cellPrograms[i].cell.executionEventId !== cellExecutionEventId; i--)\n            ;\n        cellPrograms.unshift(this._cellPrograms[i]);\n        let lastExecutionCountSeen = this._cellPrograms[i].cell.executionCount;\n        for (i--; i >= 0; i--) {\n            let cellProgram = this._cellPrograms[i];\n            let cell = cellProgram.cell;\n            if (cell.executionCount >= lastExecutionCountSeen) {\n                break;\n            }\n            if (!cellProgram.hasError) {\n                cellPrograms.unshift(cellProgram);\n            }\n            lastExecutionCountSeen = cell.executionCount;\n        }\n        return new Program(cellPrograms);\n    }\n    buildFrom(executionEventId) {\n        const cellProgram = this.getCellProgram(executionEventId);\n        if (!cellProgram) {\n            return null;\n        }\n        const i = this._cellPrograms.findIndex(cp => cp.cell.persistentId === cellProgram.cell.persistentId);\n        return new Program(this._cellPrograms.slice(i));\n    }\n    getCellProgram(executionEventId) {\n        let matchingPrograms = this._cellPrograms.filter(cp => cp.cell.executionEventId == executionEventId);\n        if (matchingPrograms.length >= 1) {\n            return matchingPrograms.pop();\n        }\n        return null;\n    }\n    getCellProgramsWithSameId(executionEventId) {\n        const cellProgram = this.getCellProgram(executionEventId);\n        return this._cellPrograms.filter(cp => cp.cell.persistentId === cellProgram.cell.persistentId);\n    }\n}\n\n\n//# sourceURL=webpack:///./src/program-builder.ts?");

/***/ }),

/***/ "./src/python-parser.ts":
/*!******************************!*\
  !*** ./src/python-parser.ts ***!
  \******************************/
/*! exports provided: parse, locationString, locationContains, MODULE, IMPORT, FROM, DECORATOR, DECORATE, DEF, PARAMETER, ASSIGN, ASSERT, PASS, RETURN, YIELD, RAISE, BREAK, CONTINUE, GLOBAL, NONLOCAL, IF, WHILE, ELSE, FOR, COMPFOR, COMPIF, TRY, WITH, CALL, ARG, INDEX, SLICE, DOT, IFEXPR, LAMBDA, UNOP, BINOP, STARRED, TUPLE, LIST, SET, DICT, NAME, LITERAL, CLASS, isEquivalent, flatten, walk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"locationString\", function() { return locationString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"locationContains\", function() { return locationContains; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MODULE\", function() { return MODULE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IMPORT\", function() { return IMPORT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FROM\", function() { return FROM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DECORATOR\", function() { return DECORATOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DECORATE\", function() { return DECORATE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DEF\", function() { return DEF; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PARAMETER\", function() { return PARAMETER; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ASSIGN\", function() { return ASSIGN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ASSERT\", function() { return ASSERT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PASS\", function() { return PASS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RETURN\", function() { return RETURN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"YIELD\", function() { return YIELD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RAISE\", function() { return RAISE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BREAK\", function() { return BREAK; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CONTINUE\", function() { return CONTINUE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GLOBAL\", function() { return GLOBAL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NONLOCAL\", function() { return NONLOCAL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IF\", function() { return IF; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WHILE\", function() { return WHILE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ELSE\", function() { return ELSE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FOR\", function() { return FOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COMPFOR\", function() { return COMPFOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"COMPIF\", function() { return COMPIF; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TRY\", function() { return TRY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WITH\", function() { return WITH; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CALL\", function() { return CALL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ARG\", function() { return ARG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"INDEX\", function() { return INDEX; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SLICE\", function() { return SLICE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DOT\", function() { return DOT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IFEXPR\", function() { return IFEXPR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LAMBDA\", function() { return LAMBDA; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"UNOP\", function() { return UNOP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BINOP\", function() { return BINOP; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"STARRED\", function() { return STARRED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TUPLE\", function() { return TUPLE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LIST\", function() { return LIST; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SET\", function() { return SET; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DICT\", function() { return DICT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NAME\", function() { return NAME; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LITERAL\", function() { return LITERAL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CLASS\", function() { return CLASS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isEquivalent\", function() { return isEquivalent; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"flatten\", function() { return flatten; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"walk\", function() { return walk; });\n/* harmony import */ var _python3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./python3 */ \"./src/python3.js\");\n/* harmony import */ var _python3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_python3__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _printNode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./printNode */ \"./src/printNode.ts\");\n\n\n/**\n * Reset the lexer state after an error. Otherwise, parses after a failed parse can fail too.\n */\nlet yy = _python3__WEBPACK_IMPORTED_MODULE_0__[\"parser\"].yy;\nlet oldParseError = yy.parseError;\noldParseError = function (text, hash) {\n    this.indents = [0];\n    this.indent = 0;\n    this.dedents = 0;\n    this.brackets_count = 0;\n    oldParseError.call(this, text, hash);\n};\n/**\n * This is the main interface for parsing code.\n * Call this instead of the `parse` method in python3.js.\n * If the `parse` method gets an error, all later calls will throw an error.\n * This method resets the state of the `parse` method so that doesn't happen.\n */\nfunction parse(program) {\n    if (program.charCodeAt(0) === 65279) {\n        // eliminate byte order mark\n        program = program.slice(1);\n    }\n    // The parser is fussy about line endings, so remote\n    // carriage returns and make sure we end with a newline.\n    return Object(_python3__WEBPACK_IMPORTED_MODULE_0__[\"parse\"])(program.replace(/\\r/g, '') + '\\n');\n}\nfunction locationString(loc) {\n    return `${loc.path}${loc.last_line}:${loc.first_column}-${loc.last_line}:${loc.last_column}`;\n}\n// loc2 is inside loc1\nfunction locationContains(loc1, loc2) {\n    function contains(loc, line, col) {\n        return ((loc.first_line < line ||\n            (loc.first_line === line && loc.first_column <= col)) &&\n            (line < loc.last_line ||\n                (line === loc.last_line && col <= loc.last_column)));\n    }\n    return (contains(loc1, loc2.first_line, loc2.first_column) &&\n        contains(loc1, loc2.last_line, loc2.last_column));\n}\nconst LocatableFields = ['location', 'cellId', 'executionCount'];\nconst MODULE = 'module';\nconst IMPORT = 'import';\nconst FROM = 'from';\nconst DECORATOR = 'decorator';\nconst DECORATE = 'decorate';\nconst DEF = 'def';\nconst PARAMETER = 'parameter';\nconst ASSIGN = 'assign';\nconst ASSERT = 'assert';\nconst PASS = 'pass';\nconst RETURN = 'return';\nconst YIELD = 'yield';\nconst RAISE = 'raise';\nconst BREAK = 'break';\nconst CONTINUE = 'continue';\nconst GLOBAL = 'global';\nconst NONLOCAL = 'nonlocal';\nconst IF = 'if';\nconst WHILE = 'while';\nconst ELSE = 'else';\nconst FOR = 'for';\nconst COMPFOR = 'comp_for';\nconst COMPIF = 'comp_if';\nconst TRY = 'try';\nconst WITH = 'with';\nconst CALL = 'call';\nconst ARG = 'arg';\nconst INDEX = 'index';\nconst SLICE = 'slice';\nconst DOT = 'dot';\nconst IFEXPR = 'ifexpr';\nconst LAMBDA = 'lambda';\nconst UNOP = 'unop';\nconst BINOP = 'binop';\nconst STARRED = 'starred';\nconst TUPLE = 'tuple';\nconst LIST = 'list';\nconst SET = 'set';\nconst DICT = 'dict';\nconst NAME = 'name';\nconst LITERAL = 'literal';\nconst CLASS = 'class';\n/*\n    UTILITY FUNCTIONS\n*/\n/**\n * returns whether two syntax nodes are semantically equivalent\n */\nfunction isEquivalent(node1, node2) {\n    if (!node1 || !node2) {\n        return node1 === node2;\n    }\n    return Object(_printNode__WEBPACK_IMPORTED_MODULE_1__[\"printNode\"])(node1) === Object(_printNode__WEBPACK_IMPORTED_MODULE_1__[\"printNode\"])(node2);\n}\nfunction flatten(arrayArrays) {\n    return [].concat(...arrayArrays);\n}\n/**\n * Preorder tree traversal with optional listener.\n */\nfunction walk(node, walkListener) {\n    return walkRecursive(node, [], walkListener);\n}\n/**\n * Recursive implementation of pre-order tree walk.\n */\n// tslint:disable-next-line: max-func-body-length\nfunction walkRecursive(node, ancestors, walkListener) {\n    if (!node) {\n        console.error('Node undefined. Ancestors:', ancestors);\n        return [];\n    }\n    ancestors.push(node);\n    if (walkListener && walkListener.onEnterNode) {\n        walkListener.onEnterNode(node, ancestors);\n    }\n    let children = [];\n    switch (node.type) {\n        case MODULE:\n        case DEF:\n        case CLASS:\n            children = node.code;\n            break;\n        case IF:\n            children = [node.cond]\n                .concat(node.code)\n                .concat(node.elif ? flatten(node.elif.map(e => [e.cond].concat(e.code))) : [])\n                .concat(node.else ? [node.else] : []);\n            break;\n        case ELSE:\n            children = node.code;\n            break;\n        case WHILE:\n            children = [node.cond].concat(node.code);\n            break;\n        case WITH:\n            children = flatten(node.items.map(r => [r.with, r.as])).concat(node.code);\n            break;\n        case FOR:\n            children = node.iter.concat(node.target).concat(node.code);\n            break;\n        case TRY:\n            children = node.code\n                .concat(flatten((node.excepts || []).map(e => (e.cond ? [e.cond] : []).concat(e.code))))\n                .concat(node.else || [])\n                .concat(node.finally || []);\n            break;\n        case DECORATE:\n            children = [node.def];\n            break;\n        case LAMBDA:\n            children = [node.code];\n            break;\n        case CALL:\n            children = [node.func].concat(node.args.map(a => a.actual));\n            break;\n        case IFEXPR:\n            children = [node.test, node.then, node.else];\n            break;\n        case COMPFOR:\n            children = node.for.concat([node.in]);\n            break;\n        case UNOP:\n            children = [node.operand];\n            break;\n        case BINOP:\n            children = [node.left, node.right];\n            break;\n        case STARRED:\n            children = [node.value];\n            break;\n        case SET:\n            children = node.entries.concat(node.comp_for ? node.comp_for : []);\n            break;\n        case LIST:\n            children = node.items;\n            break;\n        case TUPLE:\n            children = node.items;\n            break;\n        case DICT:\n            children = flatten(node.entries.map(p => [p.k, p.v])).concat(node.comp_for ? node.comp_for : []);\n            break;\n        case ASSIGN:\n            if (!node.sources)\n                console.log(node);\n            children = node.sources.concat(node.targets);\n            break;\n        case ASSERT:\n            children = [node.cond].concat(node.err ? [node.err] : []);\n            break;\n        case DOT:\n            children = [node.value];\n            break;\n        case INDEX:\n            children = [node.value].concat(node.args);\n            break;\n        case SLICE:\n            children = (node.start ? [node.start] : [])\n                .concat(node.stop ? [node.stop] : [])\n                .concat(node.step ? [node.step] : []);\n            break;\n        case COMPFOR:\n            children = node.for.concat([node.in]);\n            break;\n        case COMPIF:\n            children = [node.test];\n            break;\n        case YIELD:\n            children = node.value ? node.value : [];\n            break;\n        case RETURN:\n            children = node.values ? node.values : [];\n            break;\n        case RAISE:\n            children = node.err ? [node.err] : [];\n            break;\n        case IFEXPR:\n            children = [node.test, node.then, node.else];\n            break;\n    }\n    let nodes = [node];\n    if (children.some(c => !c)) {\n        console.log('BAD CHILDREN', node);\n    }\n    let subtreeNodes = flatten(children.map(node => walkRecursive(node, ancestors, walkListener)));\n    nodes = nodes.concat(subtreeNodes);\n    if (walkListener && walkListener.onExitNode) {\n        walkListener.onExitNode(node, ancestors);\n    }\n    ancestors.pop();\n    return nodes;\n}\n\n\n//# sourceURL=webpack:///./src/python-parser.ts?");

/***/ }),

/***/ "./src/python3.js":
/*!************************!*\
  !*** ./src/python3.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, module) {/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar python3 = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,57],$V2=[1,80],$V3=[1,31],$V4=[1,83],$V5=[1,60],$V6=[1,35],$V7=[1,36],$V8=[1,50],$V9=[1,51],$Va=[1,52],$Vb=[1,53],$Vc=[1,56],$Vd=[1,55],$Ve=[1,87],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,63],$Vo=[1,65],$Vp=[1,74],$Vq=[1,75],$Vr=[1,76],$Vs=[1,81],$Vt=[1,82],$Vu=[1,84],$Vv=[1,88],$Vw=[1,89],$Vx=[1,90],$Vy=[1,91],$Vz=[1,92],$VA=[1,32],$VB=[1,61],$VC=[5,7,10,12,19,20,31,68,70,76,77,78,79,80,83,88,96,98,100,106,111,112,115,120,126,131,138,164,165,171,178,180,183,186,187,188,189,190,202,207],$VD=[7,39],$VE=[1,125],$VF=[19,202],$VG=[7,30,39,56,57,58,59,60,61,62,63,64,65,66,67],$VH=[1,141],$VI=[1,144],$VJ=[1,145],$VK=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,112,179,181],$VL=[7,13,30,39],$VM=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,179,181],$VN=[1,152],$VO=[1,159],$VP=[1,157],$VQ=[1,158],$VR=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,134,179,181],$VS=[1,161],$VT=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,134,137,179,181],$VU=[1,171],$VV=[1,172],$VW=[1,165],$VX=[1,166],$VY=[1,167],$VZ=[1,168],$V_=[1,169],$V$=[1,170],$V01=[1,173],$V11=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,113,134,137,138,142,143,144,145,146,147,148,179,181],$V21=[1,175],$V31=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,113,134,137,138,142,143,144,145,146,147,148,151,179,181],$V41=[1,177],$V51=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,113,134,137,138,142,143,144,145,146,147,148,151,154,179,181],$V61=[1,179],$V71=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,113,134,137,138,142,143,144,145,146,147,148,151,154,157,179,181],$V81=[1,181],$V91=[1,182],$Va1=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,113,134,137,138,142,143,144,145,146,147,148,151,154,157,160,161,179,181],$Vb1=[1,184],$Vc1=[1,185],$Vd1=[7,13,22,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,113,134,137,138,142,143,144,145,146,147,148,151,154,157,160,161,164,165,179,181],$Ve1=[1,187],$Vf1=[1,188],$Vg1=[1,189],$Vh1=[1,190],$Vi1=[7,13,22,28,30,31,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,113,134,137,138,142,143,144,145,146,147,148,151,154,157,160,161,164,165,168,169,170,179,181],$Vj1=[7,13,22,28,30,31,32,39,56,57,58,59,60,61,62,63,64,65,66,67,80,91,106,110,112,113,134,137,138,142,143,144,145,146,147,148,151,154,157,160,161,164,165,168,169,170,179,181],$Vk1=[1,197],$Vl1=[1,199],$Vm1=[1,198],$Vn1=[7,12,13,22,28,30,31,32,39,56,57,58,59,60,61,62,63,64,65,66,67,80,87,91,106,110,112,113,134,137,138,142,143,144,145,146,147,148,151,154,157,160,161,164,165,168,169,170,178,179,181],$Vo1=[5,7,10,12,19,20,31,68,70,76,77,78,79,80,83,88,96,98,100,106,109,110,111,112,115,116,119,120,126,131,138,164,165,171,178,180,183,186,187,188,189,190,202,207],$Vp1=[7,39,113],$Vq1=[1,224],$Vr1=[1,227],$Vs1=[22,28],$Vt1=[12,20,88,131,138,164,165,171,178,180,183,186,187,188,189,190,207],$Vu1=[1,238],$Vv1=[1,240],$Vw1=[7,13,22,30,39],$Vx1=[1,248],$Vy1=[7,28,39],$Vz1=[7,12,28,39,83,91],$VA1=[1,251],$VB1=[20,83],$VC1=[12,20,88,164,165,171,178,180,183,186,187,188,189,190],$VD1=[1,290],$VE1=[1,289],$VF1=[1,295],$VG1=[13,179],$VH1=[1,303],$VI1=[1,322],$VJ1=[1,336],$VK1=[1,334],$VL1=[1,335],$VM1=[1,356],$VN1=[1,359],$VO1=[1,355],$VP1=[10,19,202],$VQ1=[13,28],$VR1=[28,179],$VS1=[1,395],$VT1=[1,404],$VU1=[1,403],$VV1=[22,24],$VW1=[13,28,30],$VX1=[7,13,39],$VY1=[7,13,28,39],$VZ1=[5,7,10,12,19,20,31,68,70,76,77,78,79,80,83,88,96,98,100,106,110,111,112,115,116,120,126,131,138,164,165,171,178,180,183,186,187,188,189,190,202,207],$V_1=[13,28,179,181],$V$1=[1,506],$V02=[1,514],$V12=[5,7,10,12,19,20,31,68,70,76,77,78,79,80,83,88,96,98,100,106,110,111,112,115,120,126,131,138,164,165,171,178,180,183,186,187,188,189,190,202,207],$V22=[13,28,106,112,179,181];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"expressions\":3,\"file_input\":4,\"EOF\":5,\"file_input0\":6,\"NEWLINE\":7,\"stmt\":8,\"decorator\":9,\"@\":10,\"dotted_name\":11,\"(\":12,\")\":13,\"arglist\":14,\"decorators\":15,\"decorated\":16,\"classdef\":17,\"funcdef\":18,\"def\":19,\"NAME\":20,\"parameters\":21,\":\":22,\"suite\":23,\"->\":24,\"test\":25,\"typedargslist\":26,\"typedarglist_part\":27,\",\":28,\"tfpdef\":29,\"=\":30,\"*\":31,\"**\":32,\"varargslist\":33,\"varargspart\":34,\"vfpdef\":35,\"simple_stmt\":36,\"compound_stmt\":37,\"small_stmt\":38,\";\":39,\"simple_stmt0\":40,\"expr_stmt\":41,\"del_stmt\":42,\"pass_stmt\":43,\"flow_stmt\":44,\"import_stmt\":45,\"global_stmt\":46,\"nonlocal_stmt\":47,\"assert_stmt\":48,\"testlist_star_expr\":49,\"augassign\":50,\"yield_expr\":51,\"testlist\":52,\"assignlist\":53,\"testlist_star_expr0\":54,\"star_expr\":55,\"+=\":56,\"-=\":57,\"*=\":58,\"/=\":59,\"%=\":60,\"&=\":61,\"|=\":62,\"^=\":63,\"<<=\":64,\">>=\":65,\"**=\":66,\"//=\":67,\"del\":68,\"exprlist\":69,\"pass\":70,\"break_stmt\":71,\"continue_stmt\":72,\"return_stmt\":73,\"raise_stmt\":74,\"yield_stmt\":75,\"break\":76,\"continue\":77,\"return\":78,\"raise\":79,\"from\":80,\"import_name\":81,\"import_from\":82,\"import\":83,\"dotted_as_names\":84,\"import_from_tail\":85,\"import_from0\":86,\".\":87,\"ELLIPSIS\":88,\"import_as_names\":89,\"import_as_name\":90,\"as\":91,\"dotted_as_name\":92,\"import_as_names0\":93,\"dotted_as_names0\":94,\"dotted_name0\":95,\"global\":96,\"global_stmt0\":97,\"nonlocal\":98,\"nonlocal_stmt0\":99,\"assert\":100,\"if_stmt\":101,\"while_stmt\":102,\"for_stmt\":103,\"try_stmt\":104,\"with_stmt\":105,\"if\":106,\"else_part\":107,\"if_stmt0\":108,\"elif\":109,\"else\":110,\"while\":111,\"for\":112,\"in\":113,\"colon\":114,\"try\":115,\"finally\":116,\"try_excepts\":117,\"except_clause\":118,\"except\":119,\"with\":120,\"with_item\":121,\"with_stmt0\":122,\"expr\":123,\"INDENT\":124,\"suite0\":125,\"DEDENT\":126,\"or_test\":127,\"lambdef\":128,\"test_nocond\":129,\"lambdef_nocond\":130,\"lambda\":131,\"and_test\":132,\"or_test0\":133,\"or\":134,\"not_test\":135,\"and_test0\":136,\"and\":137,\"not\":138,\"comparison\":139,\"comparison0\":140,\"comp_op\":141,\"<\":142,\">\":143,\"==\":144,\">=\":145,\"<=\":146,\"!=\":147,\"is\":148,\"xor_expr\":149,\"expr0\":150,\"|\":151,\"and_expr\":152,\"xor_expr0\":153,\"^\":154,\"shift_expr\":155,\"and_expr0\":156,\"&\":157,\"arith_expr\":158,\"shift_expr0\":159,\"<<\":160,\">>\":161,\"term\":162,\"arith_expr0\":163,\"+\":164,\"-\":165,\"factor\":166,\"term0\":167,\"/\":168,\"%\":169,\"//\":170,\"~\":171,\"power\":172,\"atom_expr\":173,\"trailer_list\":174,\"trailer\":175,\"atom\":176,\"testlist_comp\":177,\"[\":178,\"]\":179,\"{\":180,\"}\":181,\"dictorsetmaker\":182,\"NUMBER\":183,\"string\":184,\"bytes\":185,\"None\":186,\"True\":187,\"False\":188,\"STRING\":189,\"BYTES\":190,\"testlist_comp_tail\":191,\"comp_for\":192,\"testlist_comp_tail0\":193,\"subscriptlist\":194,\"subscript\":195,\"subscriptlist0\":196,\"sliceop\":197,\"exprlist0\":198,\"testlist0\":199,\"dictmaker\":200,\"setmaker\":201,\"class\":202,\"argument\":203,\"arglist0\":204,\"comp_iter\":205,\"comp_if\":206,\"yield\":207,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"NEWLINE\",10:\"@\",12:\"(\",13:\")\",19:\"def\",20:\"NAME\",22:\":\",24:\"->\",28:\",\",30:\"=\",31:\"*\",32:\"**\",39:\";\",56:\"+=\",57:\"-=\",58:\"*=\",59:\"/=\",60:\"%=\",61:\"&=\",62:\"|=\",63:\"^=\",64:\"<<=\",65:\">>=\",66:\"**=\",67:\"//=\",68:\"del\",70:\"pass\",76:\"break\",77:\"continue\",78:\"return\",79:\"raise\",80:\"from\",83:\"import\",87:\".\",88:\"ELLIPSIS\",91:\"as\",96:\"global\",98:\"nonlocal\",100:\"assert\",106:\"if\",109:\"elif\",110:\"else\",111:\"while\",112:\"for\",113:\"in\",115:\"try\",116:\"finally\",119:\"except\",120:\"with\",124:\"INDENT\",126:\"DEDENT\",131:\"lambda\",134:\"or\",137:\"and\",138:\"not\",142:\"<\",143:\">\",144:\"==\",145:\">=\",146:\"<=\",147:\"!=\",148:\"is\",151:\"|\",154:\"^\",157:\"&\",160:\"<<\",161:\">>\",164:\"+\",165:\"-\",168:\"/\",169:\"%\",170:\"//\",171:\"~\",178:\"[\",179:\"]\",180:\"{\",181:\"}\",183:\"NUMBER\",186:\"None\",187:\"True\",188:\"False\",189:\"STRING\",190:\"BYTES\",202:\"class\",207:\"yield\"},\nproductions_: [0,[3,1],[4,1],[4,2],[6,1],[6,1],[6,2],[6,2],[9,3],[9,5],[9,6],[15,1],[15,2],[16,2],[16,2],[18,5],[18,7],[21,2],[21,3],[26,1],[26,2],[26,3],[27,1],[27,3],[27,1],[27,2],[27,2],[29,1],[29,3],[33,1],[33,2],[33,3],[34,1],[34,3],[34,1],[34,2],[34,2],[35,1],[8,1],[8,1],[36,2],[36,3],[36,3],[40,2],[40,3],[40,3],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[41,1],[41,3],[41,3],[41,2],[53,2],[53,3],[53,2],[53,3],[49,1],[49,2],[49,2],[49,1],[49,2],[49,2],[54,2],[54,3],[54,3],[54,2],[54,3],[54,3],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[42,2],[43,1],[44,1],[44,1],[44,1],[44,1],[44,1],[71,1],[72,1],[73,1],[73,2],[75,1],[74,1],[74,2],[74,4],[45,1],[45,1],[81,2],[82,4],[82,5],[82,4],[86,1],[86,2],[86,1],[86,2],[85,1],[85,3],[85,1],[90,1],[90,3],[92,1],[92,3],[89,1],[89,2],[89,2],[93,2],[93,3],[93,3],[84,1],[84,2],[94,2],[94,3],[11,1],[11,2],[95,2],[95,3],[46,2],[46,3],[97,2],[97,3],[47,2],[47,3],[99,2],[99,3],[48,2],[48,4],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[101,4],[101,5],[101,5],[101,6],[108,4],[108,5],[107,3],[102,4],[102,7],[103,6],[103,9],[104,6],[104,4],[104,7],[104,7],[104,10],[117,3],[117,4],[118,1],[118,2],[118,4],[105,4],[105,5],[122,2],[122,3],[121,1],[121,3],[23,1],[23,4],[125,1],[125,2],[25,1],[25,5],[25,1],[129,1],[129,1],[128,3],[128,4],[130,3],[130,4],[127,1],[127,2],[133,2],[133,3],[132,1],[132,2],[136,2],[136,3],[135,2],[135,1],[139,1],[139,2],[140,2],[140,3],[141,1],[141,1],[141,1],[141,1],[141,1],[141,1],[141,1],[141,2],[141,1],[141,2],[55,2],[123,1],[123,2],[150,2],[150,3],[149,1],[149,2],[153,2],[153,3],[152,1],[152,2],[156,2],[156,3],[155,1],[155,2],[159,2],[159,3],[159,2],[159,3],[158,1],[158,2],[163,2],[163,3],[163,2],[163,3],[162,1],[162,2],[167,2],[167,3],[167,2],[167,3],[167,2],[167,3],[167,2],[167,3],[166,2],[166,2],[166,2],[166,1],[172,1],[172,3],[174,1],[174,2],[173,1],[173,2],[176,2],[176,3],[176,3],[176,2],[176,3],[176,2],[176,3],[176,1],[176,1],[176,1],[176,1],[176,1],[176,1],[176,1],[176,1],[184,1],[184,2],[185,1],[185,2],[114,1],[177,1],[177,2],[177,2],[177,1],[177,2],[177,2],[191,1],[191,1],[193,2],[193,3],[193,3],[193,2],[193,3],[193,3],[175,2],[175,3],[175,2],[175,3],[175,2],[194,1],[194,2],[194,2],[196,2],[196,3],[196,3],[195,1],[195,4],[195,3],[195,3],[195,2],[195,3],[195,2],[195,2],[195,1],[197,1],[197,2],[69,1],[69,2],[69,2],[69,1],[69,2],[69,2],[198,2],[198,3],[198,3],[198,2],[198,3],[198,3],[52,1],[52,2],[52,2],[199,2],[199,3],[199,3],[182,3],[182,4],[182,4],[182,4],[182,1],[182,2],[182,2],[182,2],[200,4],[200,5],[200,5],[201,2],[201,3],[201,3],[17,4],[17,6],[17,7],[14,1],[14,2],[14,2],[204,2],[204,3],[204,3],[203,1],[203,2],[203,3],[203,2],[203,2],[205,1],[205,1],[192,4],[192,5],[206,2],[206,3],[51,1],[51,3],[51,2]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n return $$[$0] \nbreak;\ncase 2:\n this.$ = { type: 'module', code: [], location: this._$ } \nbreak;\ncase 3:\n this.$ = { type: 'module', code: $$[$0-1], location: this._$ } \nbreak;\ncase 5: case 6: case 38: case 177: case 179: case 314:\n this.$ = $$[$0] \nbreak;\ncase 7: case 180:\n this.$ = $$[$0-1].concat( $$[$0] ) \nbreak;\ncase 8:\n this.$ = { type: 'decorator', decorator: $$[$0-1], location: this._$ } \nbreak;\ncase 9:\n this.$ = { type: 'decorator', decorator: $$[$0-3], args: '()', location: this._$ } \nbreak;\ncase 10:\n this.$ = { type: 'decorator', decorator: $$[$0-4], args: $$[$0-2], location: this._$ } \nbreak;\ncase 11: case 19: case 43: case 62: case 65: case 68: case 71: case 118: case 121: case 124: case 126: case 173: case 279: case 282: case 287: case 290: case 298: case 301: case 327: case 330: case 344: case 350: case 353:\n this.$ = [ $$[$0] ] \nbreak;\ncase 12: case 45: case 64: case 67: case 70: case 73: case 120: case 123: case 125: case 127: case 174: case 281: case 284: case 289: case 292: case 300: case 303: case 329: case 332: case 346: case 352: case 355:\n this.$ = [ $$[$0-1] ].concat( $$[$0] ) \nbreak;\ncase 13: case 14:\n this.$ = { type: 'decorate', decorators: $$[$0-1], def: $$[$0], location: this._$ } \nbreak;\ncase 15:\n this.$ = { type: 'def', name: $$[$0-3], params: $$[$0-2], code: $$[$0], location: this._$ } \nbreak;\ncase 16:\n this.$ = { type: 'def', name: $$[$0-5], params: $$[$0-4], code: $$[$0], annot: $$[$0-2], location: this._$ } \nbreak;\ncase 17:\n this.$ = [] \nbreak;\ncase 18: case 112: case 178:\n this.$ = $$[$0-1] \nbreak;\ncase 20: case 44: case 63: case 66: case 69: case 72: case 119: case 122: case 280: case 283: case 288: case 291: case 299: case 302: case 328: case 331: case 345: case 351: case 354:\n this.$ = [ $$[$0-1] ] \nbreak;\ncase 21:\n this.$ = [ $$[$0-2] ].concat($$[$0]) \nbreak;\ncase 23:\n $$[$0-2].default = $$[$0]; this.$ = $$[$0-2] \nbreak;\ncase 24:\n this.$ = { name: '', star: true, location: this._$ } \nbreak;\ncase 25:\n this.$ = { name: $$[$0], star: true, location: this._$ } \nbreak;\ncase 26:\n  this.$ = {name: $$[$0], starstar: true, location: this._$ } \nbreak;\ncase 27:\n this.$ = { type: 'parameter', name: $$[$0], location: this._$ } \nbreak;\ncase 28:\n this.$ = { type: 'parameter', name: $$[$0-2], anno: $$[$0], location: this._$ } \nbreak;\ncase 29: case 39: case 134: case 138: case 315: case 318: case 321: case 324:\n this.$ = [$$[$0]] \nbreak;\ncase 30: case 40: case 316: case 319: case 322: case 325:\n this.$ = [$$[$0-1]] \nbreak;\ncase 31:\n this.$ = [$$[$0-2]].concat($$[$0]) \nbreak;\ncase 32:\n this.$ = [{ type: 'parameter', name: $$[$0], location: this._$ }] \nbreak;\ncase 33:\n this.$ = [{ type: 'parameter', name: $$[$0-2], default_value: $$[$0], location: this._$ }] \nbreak;\ncase 34:\n this.$ = [{ name: '', star: true, location: this._$ }] \nbreak;\ncase 35:\n this.$ = [{ name: $$[$0], star: true, location: this._$ }] \nbreak;\ncase 36:\n this.$ = [{ name: $$[$0], starstar: true, location: this._$ }] \nbreak;\ncase 41:\n this.$ = [$$[$0-2]] \nbreak;\ncase 42:\n this.$ = [ $$[$0-2] ].concat( $$[$0-1] ) \nbreak;\ncase 54:\n this.$ = $$[$0].length == 1 ? $$[$0][0] : { type: 'tuple', items: $$[$0], location: this._$ } \nbreak;\ncase 55: case 56:\n this.$ = { type: 'assign', op: $$[$0-1], targets: $$[$0-2], sources: $$[$0], location: this._$ } \nbreak;\ncase 57:\n this.$ = { type: 'assign', targets: $$[$0-1].concat($$[$0].targets), sources: $$[$0].sources, location: this._$ } \nbreak;\ncase 58:\n this.$ = { targets: [], sources: [$$[$0]] } \nbreak;\ncase 59:\n this.$ = { targets: $$[$0], sources: [$$[$0-1]] } \nbreak;\ncase 60:\n this.$ = { targets: [], sources: $$[$0] } \nbreak;\ncase 61:\n this.$ = { targets: $$[$0-1].concat($$[$0].targets), sources: $$[$0].sources } \nbreak;\ncase 86:\n this.$ = {type:'del', name: $$[$0-1], location: this._$} \nbreak;\ncase 87:\n this.$ = {type:'pass', location: this._$} \nbreak;\ncase 93:\n this.$ = {type:'break', location: this._$} \nbreak;\ncase 94:\n this.$ = {type:'continue', location: this._$} \nbreak;\ncase 95:\n this.$ = {type:'return', location: this._$} \nbreak;\ncase 96:\n this.$ = {type:'return', values:$$[$0], location: this._$} \nbreak;\ncase 98:\n this.$ = {type: 'raise', location: this._$} \nbreak;\ncase 99:\n this.$ = {type: 'raise', err: $$[$0], location: this._$ } \nbreak;\ncase 100:\n \n            this.$ = { type: 'raise',  err: $$[$0-2], location: this._$  }\n        \nbreak;\ncase 103:\n this.$ = {type: 'import', names: $$[$0], location: this._$ } \nbreak;\ncase 104: case 106:\n this.$ = { type: 'from',  base: $$[$0-2], imports: $$[$0], location: this._$ } \nbreak;\ncase 105:\n this.$ = { type: 'from',  base: $$[$0-3] + $$[$0-2], imports: $$[$0], location: this._$ } \nbreak;\ncase 108: case 110: case 129: case 130: case 275: case 277:\n this.$ = $$[$0-1] + $$[$0] \nbreak;\ncase 111:\n this.$ = [{ path: '*' }] \nbreak;\ncase 114: case 116:\n this.$ = { path: $$[$0], location: this._$ } \nbreak;\ncase 115: case 117:\n this.$ = { path: $$[$0-2], name: $$[$0], location: this._$ } \nbreak;\ncase 131:\n this.$ = $$[$0-2] + $$[$0-1] + $$[$0] \nbreak;\ncase 132:\n this.$ = { type: 'global', names: [$$[$0]], location: this._$ } \nbreak;\ncase 133:\n this.$ = { type: 'global', names: $$[$0-1], location: this._$ } \nbreak;\ncase 135: case 139: case 317: case 323:\n this.$ = [$$[$0-1]].concat($$[$0]) \nbreak;\ncase 136:\n this.$ = { type: 'nonlocal', names: [$$[$0]], location: this._$ } \nbreak;\ncase 137:\n this.$ = { type: 'nonlocal', names: $$[$0-1], location: this._$ } \nbreak;\ncase 140:\n this.$ = { type: 'assert',  cond: $$[$0], location: this._$ } \nbreak;\ncase 141:\n this.$ = { type: 'assert',  cond: $$[$0-2], err: $$[$0], location: this._$ } \nbreak;\ncase 150:\n this.$ = { type: 'if',  cond: $$[$0-2], code: $$[$0], location: this._$ } \nbreak;\ncase 151:\n \n            this.$ = { type: 'if', cond: $$[$0-3], code: $$[$0-1], else: $$[$0], location: this._$ }\n        \nbreak;\ncase 152:\n\n            this.$ = { type: 'if', cond: $$[$0-3], code: $$[$0-1], elif: $$[$0], location: this._$ }\n        \nbreak;\ncase 153:\n\n            this.$ = { type: 'if', cond: $$[$0-4], code: $$[$0-2], elif: $$[$0-1], else: $$[$0], location: this._$ }\n        \nbreak;\ncase 154:\n this.$ = [ { cond: $$[$0-2], code: $$[$0] } ] \nbreak;\ncase 155:\n this.$ = [ { cond: $$[$0-3], code: $$[$0-1] } ].concat( $$[$0] ) \nbreak;\ncase 156:\n this.$ = { type: 'else', code: $$[$0], location: this._$ } \nbreak;\ncase 157:\n this.$ = { type: 'while',  cond: $$[$0-2], code: $$[$0], location: this._$ } \nbreak;\ncase 158:\n this.$ = { type: 'while',  cond: $$[$0-5], code: $$[$0-3], else: $$[$0], location: this._$ } \nbreak;\ncase 159:\n this.$ = { type: 'for',  target: $$[$0-4], iter: $$[$0-2], code: $$[$0], location: this._$,\n            decl_location: {\n                first_line: this._$.first_line,\n                first_column: this._$.first_column,\n                last_line: $$[$0-1].location.last_line,\n                last_column: $$[$0-1].location.last_column\n            } } \nbreak;\ncase 160:\n this.$ = { type: 'for',  target: $$[$0-7], iter: $$[$0-5], code: $$[$0-3], else: $$[$0], location: this._$,\n            decl_location: {\n                first_line: this._$.first_line,\n                first_column: this._$.first_column,\n                last_line: $$[$0-4].location.last_line,\n                last_column: $$[$0-4].location.last_column\n            } } \nbreak;\ncase 161:\n this.$ = { type: 'try',  code: $$[$0-3], finally: $$[$0], location: this._$ } \nbreak;\ncase 162:\n this.$ = { type: 'try',  code: $$[$0-1], excepts: $$[$0], location: this._$ } \nbreak;\ncase 163:\n this.$ = { type: 'try',  code: $$[$0-4], excepts: $$[$0-3], finally: $$[$0], location: this._$ } \nbreak;\ncase 164:\n this.$ = { type: 'try',  code: $$[$0-4], excepts: $$[$0-3], else: $$[$0], location: this._$ } \nbreak;\ncase 165:\n this.$ = { type: 'try',  code: $$[$0-7], excepts: $$[$0-6], else: $$[$0-3], finally: $$[$0], location: this._$ } \nbreak;\ncase 166:\n $$[$0-2].code = $$[$0]; this.$ = [ $$[$0-2] ] \nbreak;\ncase 167:\n $$[$0-3].code = $$[$0-1]; this.$ = [ $$[$0-3] ].concat( $$[$0] ) \nbreak;\ncase 168:\n this.$ = { cond: null } \nbreak;\ncase 169:\n this.$ = { cond: $$[$0] } \nbreak;\ncase 170:\n this.$ = { cond: $$[$0-2], name: $$[$0] } \nbreak;\ncase 171:\n this.$ = { type: 'with',  items: [ $$[$0-2] ], code: $$[$0], location: this._$ } \nbreak;\ncase 172:\n \n            $$[$0-3] = [ $$[$0-3] ].concat( $$[$0-2] )\n            this.$ = { type: 'with', items: $$[$0-3], code: $$[$0], location: this._$ }\n        \nbreak;\ncase 175:\n this.$ = { with: $$[$0], as: $$[$0] } \nbreak;\ncase 176:\n this.$ = { with: $$[$0-2], as: $$[$0] } \nbreak;\ncase 182:\n this.$ = {type:'ifexpr', test: $$[$0-2], then:$$[$0-4], else: $$[$0], location: this._$ } \nbreak;\ncase 186:\n this.$ = { type: 'lambda',  args: '', code: $$[$0], location: this._$ } \nbreak;\ncase 187:\n this.$ = { type: 'lambda',  args: $$[$0-2], code: $$[$0-1], location: this._$ } \nbreak;\ncase 191: case 195: case 201: case 216: case 220: case 224: case 228: case 234: case 240:\n this.$ = $$[$0]($$[$0-1]) \nbreak;\ncase 192: case 196:\n loc = this._$; this.$ = function (left) { return { type: 'binop', op: $$[$0-1], left: left, right: $$[$0], location: loc }; } \nbreak;\ncase 193: case 197:\n loc = this._$; this.$ = function (left) { return $$[$0]({ type: 'binop', op: $$[$0-2], left: left, right: $$[$0-1], location: loc }); } \nbreak;\ncase 198:\n this.$ = { type: 'unop', op: $$[$0-1], operand: $$[$0], location: this._$ } \nbreak;\ncase 202:\n loc=this._$; this.$ = function (left) { return { type: 'binop', op: $$[$0-1], left: left, right: $$[$0], location: loc }; } \nbreak;\ncase 203:\n loc=this._$; this.$ = function (left) { return $$[$0]({ type: 'binop', op: $$[$0-2], left: left, right: $$[$0-1], location: loc }); } \nbreak;\ncase 211: case 213:\n this.$ = $$[$0-1]+$$[$0] \nbreak;\ncase 214:\n this.$ = { type:'starred', value: $$[$0-1], location: this._$ } \nbreak;\ncase 217: case 221: case 225: case 229: case 231: case 235: case 237: case 241: case 243: case 245: case 247:\n loc = this._$; this.$ = function (left) { return {type:'binop', op:$$[$0-1], left: left, right: $$[$0], location: loc }; } \nbreak;\ncase 218: case 222: case 226: case 230: case 232: case 236: case 238: case 242: case 244: case 246: case 248:\n loc = this._$; this.$ = function (left) { return $$[$0]({type:'binop', op:$$[$0-2], left: left, right: $$[$0-1], location: loc }); } \nbreak;\ncase 249: case 250: case 251:\n this.$ = {type:'unop', op:$$[$0-1], operand:$$[$0], location: this._$} \nbreak;\ncase 254:\n this.$ = {type: 'binop', op:$$[$0-1], left: $$[$0-2], right: $$[$0], location: this._$} \nbreak;\ncase 256:\n this.$ = function (left) { return $$[$0]($$[$0-1](left)) } \nbreak;\ncase 258:\n partial = $$[$0]($$[$0-1]); partial.location = this._$; this.$ = partial; \nbreak;\ncase 259:\n this.$ = { type: 'tuple', items: [], location: this._$ } \nbreak;\ncase 260:\n this.$ = { type: 'yieldexpr', value: $$[$0-1], location: this._$ } \nbreak;\ncase 261:\n this.$ = { type: 'tuple', items: $$[$0-1], location: this._$ } \nbreak;\ncase 262:\n this.$ = { type: 'list', items: [], location: this._$ } \nbreak;\ncase 263:\n this.$ = { type: 'list',  items: $$[$0-1], location: this._$ } \nbreak;\ncase 264:\n this.$ = { type: 'dict',  entries: [], location: this._$ } \nbreak;\ncase 265:\n this.$ = { type: $$[$0-1].type, entries: $$[$0-1].entries, comp_for: $$[$0-1].comp_for, location: this._$ } \nbreak;\ncase 266:\n this.$ = { type: 'name', id: $$[$0], location: this._$ } \nbreak;\ncase 267:\n this.$ = { type: 'literal', value: $$[$0] * 1, location: this._$ } \nbreak;\ncase 268: case 269:\n this.$ = { type: 'literal', value: $$[$0], location: this._$ } \nbreak;\ncase 270:\n this.$ = { type: 'literal', value: { type: 'ellipsis' }, location: this._$ } \nbreak;\ncase 271:\n this.$ = { type: 'literal', value: 'None', location: this._$ } \nbreak;\ncase 272:\n this.$ = { type: 'literal', value: 'True', location: this._$} \nbreak;\ncase 273:\n this.$ = { type: 'literal', value: 'False', location: this._$} \nbreak;\ncase 278:\n this.$ = { location: this._$ } \nbreak;\ncase 293:\n loc = this._$; this.$ = function (left) { return {type: 'call', func: left, args: [], location: loc }; } \nbreak;\ncase 294:\n loc = this._$; this.$ = function (left) { return {type: 'call', func: left, args: $$[$0-1], location: loc }; } \nbreak;\ncase 295:\n loc = this._$; this.$ = function (left) { return {type: 'index', value: left, args: [], location: loc }; } \nbreak;\ncase 296:\n loc = this._$; this.$ = function (left) { return {type: 'index', value: left, args: $$[$0-1], location: loc }; } \nbreak;\ncase 297:\n loc = this._$; this.$ = function (left) { return {type: 'dot', value: left, name: $$[$0], location: loc }; } \nbreak;\ncase 305:\n this.$ = { type: 'slice', start: $$[$0-3], stop: $$[$0-1], step: $$[$0], location: this._$ } \nbreak;\ncase 306:\n this.$ = { type: 'slice', start: $$[$0-2], stop: $$[$0], location: this._$ } \nbreak;\ncase 307:\n this.$ = { type: 'slice', start: $$[$0-2], step: $$[$0], location: this._$ } \nbreak;\ncase 308:\n this.$ = { type: 'slice', start: $$[$0-1], location: this._$ } \nbreak;\ncase 309:\n this.$ = { type: 'slice', stop: $$[$0-1], step: $$[$0], location: this._$ } \nbreak;\ncase 310:\n this.$ = { type: 'slice', stop: $$[$0], location: this._$ } \nbreak;\ncase 311:\n this.$ = { type: 'slice', step: $$[$0], location: this._$ } \nbreak;\ncase 312:\n this.$ = { type: 'slice', location: this._$ } \nbreak;\ncase 313:\n this.$ = undefined \nbreak;\ncase 320: case 326:\n this.$ = $$[$0-1].concat($$[$0]) \nbreak;\ncase 333:\n this.$ = { type: 'dict', entries: [{ k: $$[$0-2], v: $$[$0] }], location: this._$ } \nbreak;\ncase 334:\n this.$ = { type: 'dict', entries: [{ k: $$[$0-3], v: $$[$0-1] }], location: this._$ } \nbreak;\ncase 335:\n this.$ = { type: 'dict', entries: [{ k: $$[$0-3], v: $$[$0-1] }], comp_for: $$[$0], location: this._$ } \nbreak;\ncase 336:\n this.$ = { type: 'dict', entries: [{ k: $$[$0-3], v: $$[$0-1] }].concat( $$[$0] ), location: this._$ } \nbreak;\ncase 337:\n this.$ = { type: 'set', entries: [ $$[$0] ], location: this._$ } \nbreak;\ncase 338:\n this.$ = { type: 'set', entries: [ $$[$0-1] ], location: this._$ } \nbreak;\ncase 339:\n this.$ = { type: 'set', entries: [ $$[$0-1] ], comp_for: $$[$0], location: this._$ } \nbreak;\ncase 340:\n this.$ = { type: 'set', entries: [ $$[$0-1] ].concat( $$[$0] ), location: this._$ } \nbreak;\ncase 341:\n this.$ = [{ k: $$[$0-2], v: $$[$0] }] \nbreak;\ncase 342:\n this.$ = [{ k: $$[$0-3], v: $$[$0-1] }] \nbreak;\ncase 343:\n this.$ = [{ k: $$[$0-3], v: $$[$0-1] }].concat( $$[$0] ) \nbreak;\ncase 347:\n this.$ = { type: 'class',  name: $$[$0-2], code: $$[$0], location: this._$ } \nbreak;\ncase 348:\n this.$ = { type: 'class',  name: $$[$0-4], code: $$[$0], location: this._$ } \nbreak;\ncase 349:\n this.$ = { type: 'class',  name: $$[$0-5], code: $$[$0], extends: $$[$0-3], location: this._$ } \nbreak;\ncase 356:\n this.$ = { type: 'arg', actual: $$[$0], location: this._$ } \nbreak;\ncase 357:\n this.$ = { type: 'arg', actual: $$[$0-1], loop: $$[$0], location: this._$ } \nbreak;\ncase 358:\n this.$ = { type: 'arg', keyword: $$[$0-2], actual: $$[$0], location: this._$ } \nbreak;\ncase 359:\n this.$ = { type: 'arg', kwargs: true, actual: $$[$0], location: this._$ } \nbreak;\ncase 360:\n this.$ = { type: 'arg', varargs: true, actual: $$[$0], location: this._$ } \nbreak;\ncase 363:\n this.$ = [{ type: 'comp_for', for: $$[$0-2], in: $$[$0], location: this._$ }] \nbreak;\ncase 364:\n this.$ = [{ type: 'comp_for', for: $$[$0-3], in: $$[$0-1], location: this._$ }].concat( $$[$0] ) \nbreak;\ncase 365:\n this.$ = [{ type: 'comp_if', test: $$[$0], location: this._$ }] \nbreak;\ncase 366:\n this.$ = [{ type: 'comp_if', test: $$[$0-1], location: this._$ }].concat( $$[$0] )\nbreak;\ncase 367:\n this.$ = { type: 'yield', location: this._$ } \nbreak;\ncase 368:\n this.$ = { type: 'yield', from: $$[$0], location: this._$ } \nbreak;\ncase 369:\n this.$ = { type: 'yield', value: $$[$0], location: this._$ } \nbreak;\n}\n},\ntable: [{3:1,4:2,5:[1,3],6:4,7:$V0,8:6,9:47,10:$V1,12:$V2,15:33,16:17,17:16,18:15,19:$V3,20:$V4,25:48,31:$V5,36:7,37:8,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,101:10,102:11,103:12,104:13,105:14,106:$Vi,111:$Vj,112:$Vk,115:$Vl,120:$Vm,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,202:$VA,207:$VB},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,93]},{5:[2,4],6:94,7:$V0,8:6,9:47,10:$V1,12:$V2,15:33,16:17,17:16,18:15,19:$V3,20:$V4,25:48,31:$V5,36:7,37:8,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,101:10,102:11,103:12,104:13,105:14,106:$Vi,111:$Vj,112:$Vk,115:$Vl,120:$Vm,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,202:$VA,207:$VB},{5:[2,5],6:95,7:$V0,8:6,9:47,10:$V1,12:$V2,15:33,16:17,17:16,18:15,19:$V3,20:$V4,25:48,31:$V5,36:7,37:8,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,101:10,102:11,103:12,104:13,105:14,106:$Vi,111:$Vj,112:$Vk,115:$Vl,120:$Vm,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,202:$VA,207:$VB},o($VC,[2,38]),o($VC,[2,39]),{7:[1,96],39:[1,97],40:98},o($VC,[2,142]),o($VC,[2,143]),o($VC,[2,144]),o($VC,[2,145]),o($VC,[2,146]),o($VC,[2,147]),o($VC,[2,148]),o($VC,[2,149]),o($VD,[2,46]),o($VD,[2,47]),o($VD,[2,48]),o($VD,[2,49]),o($VD,[2,50]),o($VD,[2,51]),o($VD,[2,52]),o($VD,[2,53]),{12:$V2,20:$V4,25:99,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,25:100,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,31:$V5,55:103,69:101,88:$Ve,123:102,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{22:[1,104]},{12:$V2,20:$V4,25:106,88:$Ve,121:105,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{20:[1,107]},{20:[1,108]},{17:109,18:110,19:$V3,202:$VA},o($VD,[2,54],{50:111,53:112,30:$VE,56:[1,113],57:[1,114],58:[1,115],59:[1,116],60:[1,117],61:[1,118],62:[1,119],63:[1,120],64:[1,121],65:[1,122],66:[1,123],67:[1,124]}),{12:$V2,20:$V4,31:$V5,55:103,69:126,88:$Ve,123:102,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VD,[2,87]),o($VD,[2,88]),o($VD,[2,89]),o($VD,[2,90]),o($VD,[2,91]),o($VD,[2,92]),o($VD,[2,101]),o($VD,[2,102]),{20:[1,127]},{20:[1,128]},{12:$V2,20:$V4,25:129,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VF,[2,11],{9:47,15:130,10:$V1}),o($VG,[2,62],{54:132,28:[1,131]}),o($VG,[2,65],{54:134,28:[1,133]}),o($VD,[2,93]),o($VD,[2,94]),o($VD,[2,95],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,52:135,25:136,12:$V2,20:$V4,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VD,[2,98],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:137,12:$V2,20:$V4,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VD,[2,97]),{11:140,20:$VH,84:138,92:139},{11:142,20:$VH,86:143,87:$VI,88:$VJ},{11:146,20:$VH},o($VK,[2,181],{106:[1,147]}),o($VK,[2,183]),{12:$V2,20:$V4,88:$Ve,123:148,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VL,[2,367],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:136,52:150,12:$V2,20:$V4,80:[1,149],88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VM,[2,190],{133:151,134:$VN}),{20:$VO,22:[1,153],31:$VP,32:$VQ,33:154,34:155,35:156},o($VR,[2,194],{136:160,137:$VS}),{12:$V2,20:$V4,88:$Ve,123:67,135:162,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VT,[2,199]),o($VT,[2,200],{140:163,141:164,113:$VU,138:$VV,142:$VW,143:$VX,144:$VY,145:$VZ,146:$V_,147:$V$,148:$V01}),o($V11,[2,215],{150:174,151:$V21}),o($V31,[2,219],{153:176,154:$V41}),o($V51,[2,223],{156:178,157:$V61}),o($V71,[2,227],{159:180,160:$V81,161:$V91}),o($Va1,[2,233],{163:183,164:$Vb1,165:$Vc1}),o($Vd1,[2,239],{167:186,31:$Ve1,168:$Vf1,169:$Vg1,170:$Vh1}),{12:$V2,20:$V4,88:$Ve,164:$Vp,165:$Vq,166:191,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,88:$Ve,164:$Vp,165:$Vq,166:192,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,88:$Ve,164:$Vp,165:$Vq,166:193,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($Vi1,[2,252]),o($Vi1,[2,253],{32:[1,194]}),o($Vj1,[2,257],{174:195,175:196,12:$Vk1,87:$Vl1,178:$Vm1}),{12:$V2,13:[1,200],20:$V4,25:203,31:$V5,51:201,55:204,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,177:202,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{12:$V2,20:$V4,25:203,31:$V5,55:204,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,177:206,178:$Vs,179:[1,205],180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,25:209,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,181:[1,207],182:208,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($Vn1,[2,266]),o($Vn1,[2,267]),o($Vn1,[2,268]),o($Vn1,[2,269]),o($Vn1,[2,270]),o($Vn1,[2,271]),o($Vn1,[2,272]),o($Vn1,[2,273]),o($Vn1,[2,274],{184:210,189:$Vy}),o($Vn1,[2,276],{185:211,190:$Vz}),{1:[2,3]},{5:[2,6]},{5:[2,7]},o($Vo1,[2,40]),{7:[1,212],12:$V2,20:$V4,25:48,31:$V5,38:213,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{7:[1,214]},{22:[1,215]},{22:[1,216]},{113:[1,217]},o($Vp1,[2,315],{198:219,28:[1,218]}),o($Vp1,[2,318],{198:221,28:[1,220]}),{7:$Vq1,12:$V2,20:$V4,23:222,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{22:[1,225],28:$Vr1,122:226},o($Vs1,[2,175],{91:[1,228]}),{12:[1,230],21:229},{12:[1,232],22:[1,231]},o($VC,[2,13]),o($VC,[2,14]),{12:$V2,20:$V4,25:136,51:233,52:234,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},o($VD,[2,57]),o($Vt1,[2,74]),o($Vt1,[2,75]),o($Vt1,[2,76]),o($Vt1,[2,77]),o($Vt1,[2,78]),o($Vt1,[2,79]),o($Vt1,[2,80]),o($Vt1,[2,81]),o($Vt1,[2,82]),o($Vt1,[2,83]),o($Vt1,[2,84]),o($Vt1,[2,85]),{12:$V2,20:$V4,25:48,31:$V5,49:236,51:235,55:49,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},o($VD,[2,86]),o($VD,[2,132],{97:237,28:$Vu1}),o($VD,[2,136],{99:239,28:$Vv1}),o($VD,[2,140],{28:[1,241]}),o($VF,[2,12]),o($VG,[2,63],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:242,55:243,12:$V2,20:$V4,31:$V5,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VG,[2,64]),o($VG,[2,66],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:242,55:243,12:$V2,20:$V4,31:$V5,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VG,[2,67]),o($VD,[2,96]),o($Vw1,[2,327],{199:245,28:[1,244]}),o($VD,[2,99],{80:[1,246]}),o($VD,[2,103]),o($VD,[2,124],{94:247,28:$Vx1}),o($Vy1,[2,116],{91:[1,249]}),o($Vz1,[2,128],{95:250,87:$VA1}),{83:[1,252]},{11:253,20:$VH,83:[1,254]},o($VB1,[2,107],{86:255,87:$VI,88:$VJ}),o($VB1,[2,109],{86:256,87:$VI,88:$VJ}),{7:[1,257],12:[1,258]},{12:$V2,20:$V4,88:$Ve,123:67,127:259,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o([7,13,28,30,39,56,57,58,59,60,61,62,63,64,65,66,67,112,113,179],[2,214]),{12:$V2,20:$V4,25:260,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VL,[2,369]),o($VM,[2,191]),{12:$V2,20:$V4,88:$Ve,123:67,132:261,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,25:262,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{22:[1,263]},{22:[2,29],28:[1,264]},o($Vs1,[2,32],{30:[1,265]}),o($Vs1,[2,34],{35:266,20:$VO}),{20:$VO,35:267},o([22,28,30],[2,37]),o($VR,[2,195]),{12:$V2,20:$V4,88:$Ve,123:67,135:268,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VT,[2,198]),o($VT,[2,201]),{12:$V2,20:$V4,88:$Ve,123:269,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VC1,[2,204]),o($VC1,[2,205]),o($VC1,[2,206]),o($VC1,[2,207]),o($VC1,[2,208]),o($VC1,[2,209]),o($VC1,[2,210]),{113:[1,270]},o($VC1,[2,212],{138:[1,271]}),o($V11,[2,216]),{12:$V2,20:$V4,88:$Ve,149:272,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($V31,[2,220]),{12:$V2,20:$V4,88:$Ve,152:273,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($V51,[2,224]),{12:$V2,20:$V4,88:$Ve,155:274,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($V71,[2,228]),{12:$V2,20:$V4,88:$Ve,158:275,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,88:$Ve,158:276,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($Va1,[2,234]),{12:$V2,20:$V4,88:$Ve,162:277,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,88:$Ve,162:278,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($Vd1,[2,240]),{12:$V2,20:$V4,88:$Ve,164:$Vp,165:$Vq,166:279,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,88:$Ve,164:$Vp,165:$Vq,166:280,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,88:$Ve,164:$Vp,165:$Vq,166:281,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,88:$Ve,164:$Vp,165:$Vq,166:282,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($Vi1,[2,249]),o($Vi1,[2,250]),o($Vi1,[2,251]),{12:$V2,20:$V4,88:$Ve,164:$Vp,165:$Vq,166:283,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($Vj1,[2,258]),o($Vj1,[2,255],{175:196,174:284,12:$Vk1,87:$Vl1,178:$Vm1}),{12:$V2,13:[1,285],14:286,20:$V4,25:288,31:$VD1,32:$VE1,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,203:287},{12:$V2,20:$V4,22:$VF1,25:294,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,179:[1,291],180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,194:292,195:293},{20:[1,296]},o($Vn1,[2,259]),{13:[1,297]},{13:[1,298]},o($VG1,[2,279],{191:300,192:301,193:302,28:[1,299],112:$VH1}),o($VG1,[2,282],{192:301,193:302,191:305,28:[1,304],112:$VH1}),o($Vn1,[2,262]),{179:[1,306]},o($Vn1,[2,264]),{181:[1,307]},{22:[1,308],28:[1,309],112:$VH1,181:[2,337],192:310,201:311},o($Vn1,[2,275]),o($Vn1,[2,277]),o($Vo1,[2,41]),{7:[2,43],39:[1,312],40:313},o($Vo1,[2,42]),{7:$Vq1,12:$V2,20:$V4,23:314,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{7:$Vq1,12:$V2,20:$V4,23:315,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{12:$V2,20:$V4,25:136,52:316,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($Vp1,[2,316],{149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,123:317,55:318,12:$V2,20:$V4,31:$V5,88:$Ve,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($Vp1,[2,317]),o($Vp1,[2,319],{149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,123:317,55:318,12:$V2,20:$V4,31:$V5,88:$Ve,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($Vp1,[2,320]),{116:[1,319],117:320,118:321,119:$VI1},o($Vo1,[2,177]),{124:[1,323]},{7:$Vq1,12:$V2,20:$V4,23:324,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{22:[1,325]},{12:$V2,20:$V4,25:106,88:$Ve,121:326,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,88:$Ve,123:327,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{22:[1,328],24:[1,329]},{13:[1,330],20:$VJ1,26:331,27:332,29:333,31:$VK1,32:$VL1},{7:$Vq1,12:$V2,20:$V4,23:337,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{12:$V2,13:[1,338],14:339,20:$V4,25:288,31:$VD1,32:$VE1,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,203:287},o($VD,[2,55]),o($VD,[2,56]),o($VD,[2,58],{53:340,30:$VE}),o($VD,[2,60],{53:341,30:$VE}),o($VD,[2,133]),{20:[1,342]},o($VD,[2,137]),{20:[1,343]},{12:$V2,20:$V4,25:344,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VG,[2,68],{54:346,28:[1,345]}),o($VG,[2,71],{54:348,28:[1,347]}),o($Vw1,[2,328],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:349,12:$V2,20:$V4,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($Vw1,[2,329]),{12:$V2,20:$V4,25:350,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VD,[2,125]),{11:140,20:$VH,92:351},{20:[1,352]},o($Vz1,[2,129]),{20:[1,353]},{12:$VM1,20:$VN1,31:$VO1,85:354,89:357,90:358},{83:[1,360]},{12:$VM1,20:$VN1,31:$VO1,85:361,89:357,90:358},o($VB1,[2,108]),o($VB1,[2,110]),o($VP1,[2,8]),{12:$V2,13:[1,362],14:363,20:$V4,25:288,31:$VD1,32:$VE1,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,203:287},{110:[1,364]},o($VL,[2,368]),o($VM,[2,192],{133:365,134:$VN}),o($VK,[2,186]),{12:$V2,20:$V4,25:366,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{20:$VO,22:[2,30],31:$VP,32:$VQ,33:367,34:155,35:156},{12:$V2,20:$V4,25:368,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($Vs1,[2,35]),o($Vs1,[2,36]),o($VR,[2,196],{136:369,137:$VS}),o($VT,[2,202],{141:164,140:370,113:$VU,138:$VV,142:$VW,143:$VX,144:$VY,145:$VZ,146:$V_,147:$V$,148:$V01}),o($VC1,[2,211]),o($VC1,[2,213]),o($V11,[2,217],{150:371,151:$V21}),o($V31,[2,221],{153:372,154:$V41}),o($V51,[2,225],{156:373,157:$V61}),o($V71,[2,229],{159:374,160:$V81,161:$V91}),o($V71,[2,231],{159:375,160:$V81,161:$V91}),o($Va1,[2,235],{163:376,164:$Vb1,165:$Vc1}),o($Va1,[2,237],{163:377,164:$Vb1,165:$Vc1}),o($Vd1,[2,241],{167:378,31:$Ve1,168:$Vf1,169:$Vg1,170:$Vh1}),o($Vd1,[2,243],{167:379,31:$Ve1,168:$Vf1,169:$Vg1,170:$Vh1}),o($Vd1,[2,245],{167:380,31:$Ve1,168:$Vf1,169:$Vg1,170:$Vh1}),o($Vd1,[2,247],{167:381,31:$Ve1,168:$Vf1,169:$Vg1,170:$Vh1}),o($Vi1,[2,254]),o($Vj1,[2,256]),o($Vn1,[2,293]),{13:[1,382]},{13:[2,350],28:[1,383],204:384},o($VQ1,[2,356],{192:385,30:[1,386],112:$VH1}),{12:$V2,20:$V4,25:387,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,25:388,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($Vn1,[2,295]),{179:[1,389]},{28:[1,390],179:[2,298],196:391},o($VR1,[2,304],{22:[1,392]}),o($VR1,[2,312],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:393,197:394,12:$V2,20:$V4,22:$VS1,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($Vn1,[2,297]),o($Vn1,[2,260]),o($Vn1,[2,261]),o($VG1,[2,280],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:396,55:397,12:$V2,20:$V4,31:$V5,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VG1,[2,281]),o($VG1,[2,285]),o($VG1,[2,286]),{12:$V2,20:$V4,31:$V5,55:103,69:398,88:$Ve,123:102,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VG1,[2,283],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:396,55:397,12:$V2,20:$V4,31:$V5,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VG1,[2,284]),o($Vn1,[2,263]),o($Vn1,[2,265]),{12:$V2,20:$V4,25:399,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,25:400,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,181:[2,338],183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{181:[2,339]},{181:[2,340]},{7:[2,44],12:$V2,20:$V4,25:48,31:$V5,38:213,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{7:[2,45]},o($VC,[2,150],{107:401,108:402,109:$VT1,110:$VU1}),o($VC,[2,157],{110:[1,405]}),{22:[1,407],114:406},o($Vp1,[2,321],{198:409,28:[1,408]}),o($Vp1,[2,324],{198:411,28:[1,410]}),{22:[1,412]},o($VC,[2,162],{110:[1,414],116:[1,413]}),{22:[1,415]},{12:$V2,20:$V4,22:[2,168],25:416,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{8:418,9:47,10:$V1,12:$V2,15:33,16:17,17:16,18:15,19:$V3,20:$V4,25:48,31:$V5,36:7,37:8,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,101:10,102:11,103:12,104:13,105:14,106:$Vi,111:$Vj,112:$Vk,115:$Vl,120:$Vm,123:67,125:417,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,202:$VA,207:$VB},o($VC,[2,171]),{7:$Vq1,12:$V2,20:$V4,23:419,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{22:[2,173],28:$Vr1,122:420},o($Vs1,[2,176]),{7:$Vq1,12:$V2,20:$V4,23:421,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{12:$V2,20:$V4,25:422,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VV1,[2,17]),{13:[1,423]},{13:[2,19],28:[1,424]},o($VQ1,[2,22],{30:[1,425]}),o($VQ1,[2,24],{29:426,20:$VJ1}),{20:$VJ1,29:427},o($VW1,[2,27],{22:[1,428]}),o($VC,[2,347]),{22:[1,429]},{13:[1,430]},o($VD,[2,59]),o($VD,[2,61]),o($VD,[2,134],{97:431,28:$Vu1}),o($VD,[2,138],{99:432,28:$Vv1}),o($VD,[2,141]),o($VG,[2,69],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:242,55:243,12:$V2,20:$V4,31:$V5,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VG,[2,70]),o($VG,[2,72],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:242,55:243,12:$V2,20:$V4,31:$V5,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VG,[2,73]),o($Vw1,[2,330],{199:434,28:[1,433]}),o($VD,[2,100]),o($VD,[2,126],{94:435,28:$Vx1}),o($Vy1,[2,117]),o($Vz1,[2,130],{95:436,87:$VA1}),o($VD,[2,104]),o($VD,[2,111]),{20:$VN1,89:437,90:358},o($VD,[2,113]),o($VX1,[2,118],{93:439,28:[1,438]}),o($VY1,[2,114],{91:[1,440]}),{12:$VM1,20:$VN1,31:$VO1,85:441,89:357,90:358},o($VD,[2,106]),{7:[1,442]},{13:[1,443]},{12:$V2,20:$V4,25:444,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VM,[2,193]),o($VK,[2,187]),{22:[2,31]},o($Vs1,[2,33]),o($VR,[2,197]),o($VT,[2,203]),o($V11,[2,218]),o($V31,[2,222]),o($V51,[2,226]),o($V71,[2,230]),o($V71,[2,232]),o($Va1,[2,236]),o($Va1,[2,238]),o($Vd1,[2,242]),o($Vd1,[2,244]),o($Vd1,[2,246]),o($Vd1,[2,248]),o($Vn1,[2,294]),{12:$V2,13:[2,351],20:$V4,25:288,31:$VD1,32:$VE1,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,203:445},{13:[2,352]},o($VQ1,[2,357]),{12:$V2,20:$V4,25:446,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VQ1,[2,359]),o($VQ1,[2,360]),o($Vn1,[2,296]),{12:$V2,20:$V4,22:$VF1,25:294,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,179:[2,299],180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,195:447},{179:[2,300]},o($VR1,[2,308],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:448,197:449,12:$V2,20:$V4,22:$VS1,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VR1,[2,310],{197:450,22:$VS1}),o($VR1,[2,311]),o($VR1,[2,313],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:451,12:$V2,20:$V4,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VG1,[2,287],{193:453,28:[1,452]}),o($VG1,[2,290],{193:455,28:[1,454]}),{113:[1,456]},{28:[1,457],112:$VH1,181:[2,333],192:458,200:459},{28:[1,460],181:[2,344],201:461},o($VC,[2,151]),o($VC,[2,152],{107:462,110:$VU1}),{22:[1,463]},{12:$V2,20:$V4,25:464,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{22:[1,465]},{7:$Vq1,12:$V2,20:$V4,23:466,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},o([7,12,20,31,68,70,76,77,78,79,80,83,88,96,98,100,131,138,164,165,171,178,180,183,186,187,188,189,190,207],[2,278]),o($Vp1,[2,322],{149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,123:317,55:318,12:$V2,20:$V4,31:$V5,88:$Ve,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($Vp1,[2,323]),o($Vp1,[2,325],{149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,123:317,55:318,12:$V2,20:$V4,31:$V5,88:$Ve,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($Vp1,[2,326]),{7:$Vq1,12:$V2,20:$V4,23:467,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{22:[1,468]},{22:[1,469]},{7:$Vq1,12:$V2,20:$V4,23:470,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{22:[2,169],91:[1,471]},{126:[1,472]},{8:418,9:47,10:$V1,12:$V2,15:33,16:17,17:16,18:15,19:$V3,20:$V4,25:48,31:$V5,36:7,37:8,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,101:10,102:11,103:12,104:13,105:14,106:$Vi,111:$Vj,112:$Vk,115:$Vl,120:$Vm,123:67,125:473,126:[2,179],127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,202:$VA,207:$VB},o($VC,[2,172]),{22:[2,174]},o($VC,[2,15]),{22:[1,474]},o($VV1,[2,18]),{13:[2,20],20:$VJ1,26:475,27:332,29:333,31:$VK1,32:$VL1},{12:$V2,20:$V4,25:476,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($VQ1,[2,25]),o($VQ1,[2,26]),{12:$V2,20:$V4,25:477,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{7:$Vq1,12:$V2,20:$V4,23:478,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{22:[1,479]},o($VD,[2,135]),o($VD,[2,139]),o($Vw1,[2,331],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:349,12:$V2,20:$V4,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($Vw1,[2,332]),o($VD,[2,127]),o($Vz1,[2,131]),{13:[1,480]},o($VX1,[2,119],{90:481,20:$VN1}),o($VX1,[2,120]),{20:[1,482]},o($VD,[2,105]),o($VP1,[2,9]),{7:[1,483]},o($VK,[2,182]),{13:[2,353],28:[1,484],204:485},o($VQ1,[2,358]),{28:[1,486],179:[2,301],196:487},o($VR1,[2,306],{197:488,22:$VS1}),o($VR1,[2,307]),o($VR1,[2,309]),o($VR1,[2,314]),o($VG1,[2,288],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:396,55:397,12:$V2,20:$V4,31:$V5,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VG1,[2,289]),o($VG1,[2,291],{127:58,128:59,132:62,135:64,139:66,123:67,149:68,152:69,155:70,158:71,162:72,166:73,172:77,173:78,176:79,184:85,185:86,25:396,55:397,12:$V2,20:$V4,31:$V5,88:$Ve,131:$Vn,138:$Vo,164:$Vp,165:$Vq,171:$Vr,178:$Vs,180:$Vt,183:$Vu,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz}),o($VG1,[2,292]),{12:$V2,20:$V4,88:$Ve,123:67,127:489,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,25:490,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,181:[2,334],183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{181:[2,335]},{181:[2,336]},{12:$V2,20:$V4,25:400,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,181:[2,345],183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{181:[2,346]},o($VC,[2,153]),{7:$Vq1,12:$V2,20:$V4,23:491,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{22:[1,492]},{7:$Vq1,12:$V2,20:$V4,23:493,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},o($VC,[2,159],{110:[1,494]}),o($VC,[2,161]),{7:$Vq1,12:$V2,20:$V4,23:495,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{7:$Vq1,12:$V2,20:$V4,23:496,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},o($VZ1,[2,166],{118:321,117:497,119:$VI1}),{20:[1,498]},o($Vo1,[2,178]),{126:[2,180]},{7:$Vq1,12:$V2,20:$V4,23:499,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{13:[2,21]},o($VQ1,[2,23]),o($VW1,[2,28]),o($VC,[2,348]),{7:$Vq1,12:$V2,20:$V4,23:500,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},o($VD,[2,112]),o($VX1,[2,121],{93:502,28:[1,501]}),o($VY1,[2,115]),o($VP1,[2,10]),{12:$V2,13:[2,354],20:$V4,25:288,31:$VD1,32:$VE1,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,203:445},{13:[2,355]},{12:$V2,20:$V4,22:$VF1,25:294,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,179:[2,302],180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,195:447},{179:[2,303]},o($VR1,[2,305]),o($V_1,[2,363],{205:503,192:504,206:505,106:$V$1,112:$VH1}),{22:[1,507]},o($VC,[2,156]),{7:$Vq1,12:$V2,20:$V4,23:508,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},o($VC,[2,158]),{22:[1,509]},o($VC,[2,163]),o($VC,[2,164],{116:[1,510]}),o($VZ1,[2,167]),{22:[2,170]},o($VC,[2,16]),o($VC,[2,349]),o($VX1,[2,122],{90:481,20:$VN1}),o($VX1,[2,123]),o($V_1,[2,364]),o($V_1,[2,361]),o($V_1,[2,362]),{12:$V2,20:$V4,88:$Ve,123:67,127:512,129:511,130:513,131:$V02,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{12:$V2,20:$V4,25:515,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($V12,[2,154],{108:516,109:$VT1}),{7:$Vq1,12:$V2,20:$V4,23:517,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},{22:[1,518]},o($V_1,[2,365],{192:504,206:505,205:519,106:$V$1,112:$VH1}),o($V22,[2,184]),o($V22,[2,185]),{20:$VO,22:[1,520],31:$VP,32:$VQ,33:521,34:155,35:156},{28:[1,522],181:[2,341],200:523},o($V12,[2,155]),o($VC,[2,160]),{7:$Vq1,12:$V2,20:$V4,23:524,25:48,31:$V5,36:223,38:9,41:18,42:19,43:20,44:21,45:22,46:23,47:24,48:25,49:34,51:54,55:49,68:$V6,70:$V7,71:37,72:38,73:39,74:40,75:41,76:$V8,77:$V9,78:$Va,79:$Vb,80:$Vc,81:42,82:43,83:$Vd,88:$Ve,96:$Vf,98:$Vg,100:$Vh,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz,207:$VB},o($V_1,[2,366]),{12:$V2,20:$V4,88:$Ve,123:67,127:512,129:525,130:513,131:$V02,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{22:[1,526]},{12:$V2,20:$V4,25:490,88:$Ve,123:67,127:58,128:59,131:$Vn,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,181:[2,342],183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},{181:[2,343]},o($VC,[2,165]),o($V22,[2,188]),{12:$V2,20:$V4,88:$Ve,123:67,127:512,129:527,130:513,131:$V02,132:62,135:64,138:$Vo,139:66,149:68,152:69,155:70,158:71,162:72,164:$Vp,165:$Vq,166:73,171:$Vr,172:77,173:78,176:79,178:$Vs,180:$Vt,183:$Vu,184:85,185:86,186:$Vv,187:$Vw,188:$Vx,189:$Vy,190:$Vz},o($V22,[2,189])],\ndefaultActions: {2:[2,1],3:[2,2],93:[2,3],94:[2,6],95:[2,7],310:[2,339],311:[2,340],313:[2,45],367:[2,31],384:[2,352],391:[2,300],420:[2,174],458:[2,335],459:[2,336],461:[2,346],473:[2,180],475:[2,21],485:[2,355],487:[2,303],498:[2,170],523:[2,343]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0: \n                            // if the last statement in indented, need to force a dedent before EOF\n                            if (this.indents == undefined) { this.indents = [0]; }\n                            if (this.indents.length > 1) { \n                               this.begin( 'DEDENTS' ); \n                               this.unput(' '); // make sure EOF is not triggered \n                               this.dedents = 1; \n                               this.indents.pop();\n                            } else { \n                                return 5; \n                            } \n                        \nbreak;\ncase 1: if (this.indent == undefined) this.indent = 0; this.indent += 1 \nbreak;\ncase 2: if (this.indent == undefined) this.indent = 0; this.indent = ( this.indent + 8 ) & -7 \nbreak;\ncase 3: this.indent = 0 \nbreak;\ncase 4:/* skip comments */\nbreak;\ncase 5: \n                            this.unput( yy_.yytext )\n                            if (this.indents == undefined) this.indents = [0];\n                            var last = this.indents[ this.indents.length - 1 ]\n                            if (this.indent == undefined) this.indent = 0;\n                            if ( this.indent > last ) {\n                                this.begin( 'INLINE' )\n                                this.indents.push( this.indent )\n                                return 124\n                            } else if ( this.indent < last ) {\n                                this.begin( 'DEDENTS' )\n                                this.dedents = 0 // how many dedents occured\n                                while( this.indents.length ) {\n                                    this.dedents += 1\n                                    this.indents.pop()\n                                    last = this.indents[ this.indents.length - 1 ]\n                                    if ( last == this.indent ) break\n                                }\n                                if ( !this.indents.length ) {\n                                    throw new Error( \"TabError: Inconsistent\" )\n                                }\n                            } else {\n                                this.begin( 'INLINE' )\n                            }\n                        \nbreak;\ncase 6:\n                            this.unput( yy_.yytext )\n                            if (this.dedents == undefined) this.dedents = 0;\n                            if ( this.dedents-- > 0 ) {\n                                return 126\n                            } else {\n                                this.begin( 'INLINE' )\n                            }\n                        \nbreak;\ncase 7:\n                            // implicit line joining\n                            if (this.brackets_count == undefined) this.brackets_count = 0;\n                            if ( this.brackets_count <= 0 ) {\n                                this.indent = 0; \n                                this.begin( 'INITIAL' )\n                                return 7\n                            }\n                        \nbreak;\ncase 8:\n                            tripleString = \"\";\n                            this.begin( 'TRIPLE_D' )\n                        \nbreak;\ncase 9:\n                            // escape string and convert to double quotes\n                            // http://stackoverflow.com/questions/770523/escaping-strings-in-javascript\n                            var str = tripleString\n                                .replace( /[\\\\\"']/g, '\\\\$&' )\n                                .replace(/\\u0000/g, '\\\\0');\n                            yy_.yytext = '\"' + str + '\"'\n                            this.popState();\n                            return 189\n                        \nbreak;\ncase 10:tripleString += \"\\n\";\nbreak;\ncase 11:tripleString += yy_.yytext;\nbreak;\ncase 12:\n                            tripleString = \"\";\n                            this.begin( 'TRIPLE_S' )\n                        \nbreak;\ncase 13:\n                            // escape string and convert to double quotes\n                            // http://stackoverflow.com/questions/770523/escaping-strings-in-javascript\n                            var str = tripleString\n                                .replace( /[\\\\\"']/g, '\\\\$&' )\n                                .replace(/\\u0000/g, '\\\\0');\n                            yy_.yytext = '\"' + str + '\"'\n                            this.popState();\n                            return 189\n                        \nbreak;\ncase 14:tripleString += \"\\n\";\nbreak;\ncase 15:tripleString += yy_.yytext;\nbreak;\ncase 16:/* skip comments */\nbreak;\ncase 17:/* skip line continuations */\nbreak;\ncase 18:/* skip whitespace, separate tokens */\nbreak;\ncase 19:return 88\nbreak;\ncase 20:return 183\nbreak;\ncase 21:return 183\nbreak;\ncase 22:\n                            var i = yy_.yytext.substr(2); // binary val\n                            yy_.yytext = 'parseInt(\"'+i+'\",2)'\n                            return 183\n                        \nbreak;\ncase 23:return 183\nbreak;\ncase 24:\n                            if (this.brackets_count == undefined) this.brackets_count = 0;\n                            if ( yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(' ) {\n                                this.brackets_count += 1\n                            } else if ( yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')' ) {\n                                this.brackets_count -= 1\n                            }\n                            return yy_.yytext \n                        \nbreak;\ncase 25:return 189\nbreak;\ncase 26:\n                            // escape string and convert to double quotes\n                            // http://stackoverflow.com/questions/770523/escaping-strings-in-javascript\n                            if (yy_.yytext.endsWith(\"'''\") || yy_.yytext.endsWith('\"\"\"')) {\n                                var str = yy_.yytext.substr(3, yy_.yytext.length-6)\n                                    .replace( /[\\\\\"']/g, '\\\\$&' )\n                                    .replace(/\\u0000/g, '\\\\0');\n                                yy_.yytext = '\"' + str + '\"'\n                            }\n                            return 190\n                        \nbreak;\ncase 27:\n                            const keywords = [\n                                \"continue\", \"nonlocal\", \"finally\", \"lambda\", \"return\", \"assert\",\n                                \"global\", \"import\", \"except\", \"raise\", \"break\", \"False\", \"class\",\n                                \"while\", \"yield\", \"None\", \"True\", \"from\", \"with\", \"elif\", \"else\",\n                                \"pass\", \"for\", \"try\", \"def\", \"and\", \"del\", \"not\", \"is\", \"as\", \"if\",\n                                \"or\", \"in\"\n                            ]\n                            return ( keywords.indexOf( yy_.yytext ) == -1 )\n                                ? 'NAME'\n                                : yy_.yytext;\n                        \nbreak;\n}\n},\nrules: [/^(?:$)/,/^(?: )/,/^(?:\\t)/,/^(?:\\n)/,/^(?:#[^\\n]*)/,/^(?:.)/,/^(?:.)/,/^(?:\\n)/,/^(?:(\"\"\"))/,/^(?:(\"\"\"))/,/^(?:\\n)/,/^(?:.)/,/^(?:('''))/,/^(?:('''))/,/^(?:\\n)/,/^(?:.)/,/^(?:#[^\\n]*)/,/^(?:\\\\\\n[\\ \\t\\f]*)/,/^(?:[\\ \\t\\f]+)/,/^(?:(\\.\\.\\.))/,/^(?:(((((([0-9])+|((\\.([0-9])+)|(([0-9])+)(\\.([0-9])+)|(([0-9])+)\\.))([e|E][\\+|\\-]?(([0-9]))+))|((\\.([0-9])+)|(([0-9])+)(\\.([0-9])+)|(([0-9])+)\\.))|(([0-9])+))[jJ]))/,/^(?:(((([0-9])+|((\\.([0-9])+)|(([0-9])+)(\\.([0-9])+)|(([0-9])+)\\.))([e|E][\\+|\\-]?(([0-9]))+))|((\\.([0-9])+)|(([0-9])+)(\\.([0-9])+)|(([0-9])+)\\.)))/,/^(?:(0[b|B]([0|1])+))/,/^(?:((0[x|X](([0-9])|[a-fA-F])+)|(0[o|O]([0-7])+)|((([1-9]([0-9])*)|0+))))/,/^(?:(>>=|<<=|\\*\\*=|\\/\\/=|->|\\+=|-=|\\*=|\\/=|%=|&=|\\|=|\\^=|\\*\\*|\\/\\/|<<|>>|<=|>=|==|!=|\\(|\\)|\\[|\\]|\\{|\\}|,|:|\\.|;|@|=|\\+|-|\\*|\\/|%|&|\\||\\^|~|<|>|\\|\\|\"))/,/^(?:(([rR]|[uU]|[fF]|[fF][rR]|[rR][fF])?(((\"(([^\\\\\\n\\\"])|(\\\\.|\\\\\\n))*\")|('(([^\\\\\\n\\'])|(\\\\.|\\\\\\n))*')))))/,/^(?:(([bB]|[bB][rR]|[rR][bB])(((\"(([^\\\\\\n\\\"])|(\\\\.|\\\\\\n))*\")|('(([^\\\\\\n\\'])|(\\\\.|\\\\\\n))*')))))/,/^(?:((((_)|(([A-Z]))|(([a-z]))))((((_)|(([A-Z]))|(([a-z])))|([0-9])))*))/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,8,12],\"inclusive\":true},\"INLINE\":{\"rules\":[0,7,8,12,16,17,18,19,20,21,22,23,24,25,26,27],\"inclusive\":true},\"DEDENTS\":{\"rules\":[6],\"inclusive\":true},\"TRIPLE_D\":{\"rules\":[9,10,11],\"inclusive\":true},\"TRIPLE_S\":{\"rules\":[13,14,15],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (true) {\nexports.parser = python3;\nexports.Parser = python3.Parser;\nexports.parse = function () { return python3.parse.apply(python3, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\").readFileSync(__webpack_require__(/*! path */ \"./node_modules/path-browserify/index.js\").normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif ( true && __webpack_require__.c[__webpack_require__.s] === module) {\n  exports.main(process.argv.slice(1));\n}\n}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))\n\n//# sourceURL=webpack:///./src/python3.js?");

/***/ }),

/***/ "./src/rewrite-magics.ts":
/*!*******************************!*\
  !*** ./src/rewrite-magics.ts ***!
  \*******************************/
/*! exports provided: MagicsRewriter, TimeLineMagicRewriter, PylabLineMagicRewriter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MagicsRewriter\", function() { return MagicsRewriter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TimeLineMagicRewriter\", function() { return TimeLineMagicRewriter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PylabLineMagicRewriter\", function() { return PylabLineMagicRewriter; });\n/**\n * Utility to rewrite IPython code to remove magics.\n * Should be applied at to cells, not the entire program, to properly handle cell magics.\n * One of the most important aspects of the rewriter is that it shouldn't change the line number\n * of any of the statements in the program. If it does, this will make it impossible to\n * map back from the results of code analysis to the relevant code in the editor.\n */\nclass MagicsRewriter {\n    /**\n     * Construct a magics rewriter.\n     */\n    constructor(lineMagicRewriters) {\n        this._defaultLineMagicRewriters = [\n            new TimeLineMagicRewriter(),\n            new PylabLineMagicRewriter(),\n        ];\n        this._lineMagicRewriters =\n            lineMagicRewriters || this._defaultLineMagicRewriters;\n    }\n    /**\n     * Rewrite code so that it doesn't contain magics.\n     */\n    rewrite(text, lineMagicRewriters) {\n        text = this.rewriteCellMagic(text);\n        text = this.rewriteLineMagic(text, this._lineMagicRewriters);\n        return text;\n    }\n    /**\n     * Default rewrite rule for cell magics.\n     */\n    rewriteCellMagic(text) {\n        // \n        if (text.match(/^[^#\\s]*\\s*%%/gm)) {\n            return text\n                .split('\\n')\n                .map(l => '##' + l) // #%% is used for VS Code Python cell markers, so avoid that combo\n                .join('\\n');\n        }\n        return text;\n    }\n    /**\n     * Default rewrite rule for line magics.\n     */\n    rewriteLineMagic(text, lineMagicRewriters) {\n        // Create a mapping from character offsets to line starts.\n        let lines = text.split('\\n');\n        let lastLineStart = 0;\n        let lineStarts = lines.map((line, i) => {\n            if (i == 0) {\n                return 0;\n            }\n            let lineStart = lastLineStart + lines[i - 1].length + 1;\n            lastLineStart = lineStart;\n            return lineStart;\n        });\n        // Map magic to comment and location.\n        return text.replace(/^\\s*(%(?:\\\\\\s*\\n|[^\\n])+)/gm, (match, magicStmt) => {\n            // Find the start and end lines where the character appeared.\n            let startLine = -1, startCol = -1;\n            let endLine = -1, endCol = -1;\n            let offset = match.length - magicStmt.length;\n            for (let i = 0; i < lineStarts.length; i++) {\n                if (offset >= lineStarts[i]) {\n                    startLine = i;\n                    startCol = offset - lineStarts[i];\n                }\n                if (offset + magicStmt.length >= lineStarts[i]) {\n                    endLine = i;\n                    endCol = offset + magicStmt.length - lineStarts[i];\n                }\n            }\n            let position = [\n                { line: startLine, col: startCol },\n                { line: endLine, col: endCol },\n            ];\n            let magicStmtCleaned = magicStmt.replace(/\\\\\\s*\\n/g, '');\n            let commandMatch = magicStmtCleaned.match(/^%(\\w+).*/);\n            let rewriteText;\n            let annotations = [];\n            // Look for command-specific rewrite rules.\n            if (commandMatch && commandMatch.length >= 2) {\n                let command = commandMatch[1];\n                if (lineMagicRewriters) {\n                    for (let lineMagicRewriter of lineMagicRewriters) {\n                        if (lineMagicRewriter.commandName == command) {\n                            let rewrite = lineMagicRewriter.rewrite(match, magicStmtCleaned, position);\n                            if (rewrite.text) {\n                                rewriteText = rewrite.text;\n                            }\n                            if (rewrite.annotations) {\n                                annotations = annotations.concat(rewrite.annotations);\n                            }\n                            break;\n                        }\n                    }\n                }\n            }\n            // Default rewrite: comment out all lines.\n            if (!rewriteText) {\n                rewriteText = match\n                    .split('\\n')\n                    .map(s => '#' + s)\n                    .join('\\n');\n            }\n            // Add annotations to the beginning of the magic.\n            for (let annotation of annotations) {\n                rewriteText =\n                    \"'''\" +\n                        annotation.key +\n                        ': ' +\n                        annotation.value +\n                        \"'''\" +\n                        ' ' +\n                        rewriteText;\n            }\n            return rewriteText;\n        });\n    }\n}\n/**\n * Line magic rewriter for the \"time\" magic.\n */\nclass TimeLineMagicRewriter {\n    constructor() {\n        this.commandName = 'time';\n    }\n    rewrite(matchedText, magicStmt, position) {\n        return {\n            text: matchedText.replace(/^\\s*%time/, match => {\n                return '\"' + ' '.repeat(match.length - 2) + '\"';\n            }),\n        };\n    }\n}\n/**\n * Line magic rewriter for the \"pylab\" magic.\n */\nclass PylabLineMagicRewriter {\n    constructor() {\n        this.commandName = 'pylab';\n    }\n    rewrite(matchedText, magicStmt, position) {\n        let defData = [\n            'numpy',\n            'matplotlib',\n            'pylab',\n            'mlab',\n            'pyplot',\n            'np',\n            'plt',\n            'display',\n            'figsize',\n            'getfigs',\n        ].map(symbolName => {\n            return {\n                name: symbolName,\n                pos: [\n                    [position[0].line, position[0].col],\n                    [position[1].line, position[1].col],\n                ],\n            };\n        });\n        return {\n            annotations: [{ key: 'defs', value: JSON.stringify(defData) }],\n        };\n    }\n}\n\n\n//# sourceURL=webpack:///./src/rewrite-magics.ts?");

/***/ }),

/***/ "./src/set.ts":
/*!********************!*\
  !*** ./src/set.ts ***!
  \********************/
/*! exports provided: Set, StringSet, NumberSet, range */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Set\", function() { return Set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StringSet\", function() { return StringSet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NumberSet\", function() { return NumberSet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"range\", function() { return range; });\nclass Set {\n    // Two items A and B are considered the same value iff getIdentifier(A) === getIdentifier(B).\n    constructor(getIdentifier, ...items) {\n        this.getIdentifier = getIdentifier;\n        this._items = {};\n        this.getIdentifier = getIdentifier;\n        this._items = {};\n        this.add(...items);\n    }\n    get size() {\n        return this.items.length;\n    }\n    add(...items) {\n        items.forEach(item => (this._items[this.getIdentifier(item)] = item));\n    }\n    remove(item) {\n        if (this.has(item)) {\n            delete this._items[this.getIdentifier(item)];\n        }\n    }\n    pop() {\n        if (this.empty) {\n            throw 'empty';\n        }\n        const someKey = Object.keys(this._items)[0];\n        const result = this._items[someKey];\n        this.remove(result);\n        return result;\n    }\n    has(item) {\n        return this._items[this.getIdentifier(item)] != undefined;\n    }\n    get items() {\n        return Object.keys(this._items).map(k => this._items[k]);\n    }\n    equals(that) {\n        return (this.size == that.size && this.items.every(item => that.has(item)));\n    }\n    get empty() {\n        return Object.keys(this._items).length == 0;\n    }\n    union(...those) {\n        return new Set(this.getIdentifier, ...this.items.concat(...those.map(that => that.items)));\n    }\n    intersect(that) {\n        return new Set(this.getIdentifier, ...this.items.filter(item => that.has(item)));\n    }\n    filter(predicate) {\n        return new Set(this.getIdentifier, ...this.items.filter(predicate));\n    }\n    map(getIdentifier, transform) {\n        return new Set(getIdentifier, ...this.items.map(transform));\n    }\n    mapSame(transform) {\n        return new Set(this.getIdentifier, ...this.items.map(transform));\n    }\n    some(predicate) {\n        return this.items.some(predicate);\n    }\n    minus(that) {\n        return new Set(this.getIdentifier, ...this.items.filter(x => !that.has(x)));\n    }\n    take() {\n        if (this.empty) {\n            throw 'cannot take from an empty set';\n        }\n        const first = parseInt(Object.keys(this._items)[0]);\n        const result = this._items[first];\n        this.remove(result);\n        return result;\n    }\n    product(that) {\n        return new Set(([x, y]) => this.getIdentifier(x) + that.getIdentifier(y), ...flatten(...this.items.map(x => flatten(that.items.map(y => [x, y])))));\n    }\n}\nclass StringSet extends Set {\n    constructor(...items) {\n        super(s => s, ...items);\n    }\n}\nclass NumberSet extends Set {\n    constructor(...items) {\n        super(n => n.toString(), ...items);\n    }\n}\nfunction range(min, max) {\n    const numbers = [];\n    for (var i = min; i < max; i++) {\n        numbers.push(i);\n    }\n    return new NumberSet(...numbers);\n}\nfunction flatten(...items) {\n    return [].concat(...items);\n}\n\n\n//# sourceURL=webpack:///./src/set.ts?");

/***/ }),

/***/ "./src/slice.ts":
/*!**********************!*\
  !*** ./src/slice.ts ***!
  \**********************/
/*! exports provided: LocationSet, SliceDirection, slice, sliceLines */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LocationSet\", function() { return LocationSet; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SliceDirection\", function() { return SliceDirection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"slice\", function() { return slice; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sliceLines\", function() { return sliceLines; });\n/* harmony import */ var _python_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./python-parser */ \"./src/python-parser.ts\");\n/* harmony import */ var _control_flow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./control-flow */ \"./src/control-flow.ts\");\n/* harmony import */ var _data_flow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./data-flow */ \"./src/data-flow.ts\");\n/* harmony import */ var _set__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./set */ \"./src/set.ts\");\n\n\n\n\nfunction lineRange(loc) {\n    return Object(_set__WEBPACK_IMPORTED_MODULE_3__[\"range\"])(loc.first_line, loc.last_line + (loc.last_column ? 1 : 0));\n}\nclass LocationSet extends _set__WEBPACK_IMPORTED_MODULE_3__[\"Set\"] {\n    constructor(...items) {\n        super(l => [l.first_line, l.first_column, l.last_line, l.last_column].toString(), ...items);\n    }\n}\nfunction within(inner, outer) {\n    let leftWithin = outer.first_line < inner.first_line ||\n        (outer.first_line == inner.first_line &&\n            outer.first_column <= inner.first_column);\n    let rightWithin = outer.last_line > inner.last_line ||\n        (outer.last_line == inner.last_line &&\n            outer.last_column >= inner.last_column);\n    return leftWithin && rightWithin;\n}\nfunction isPositionBetween(line, column, start_line, start_column, end_line, end_column) {\n    let afterStart = line > start_line || (line == start_line && column >= start_column);\n    let beforeEnd = line < end_line || (line == end_line && column <= end_column);\n    return afterStart && beforeEnd;\n}\nfunction intersect(l1, l2) {\n    return (isPositionBetween(l1.first_line, l1.first_column, l2.first_line, l2.first_column, l2.last_line, l2.last_column) ||\n        isPositionBetween(l1.last_line, l1.last_column, l2.first_line, l2.first_column, l2.last_line, l2.last_column) ||\n        within(l1, l2) ||\n        within(l2, l1));\n}\nvar SliceDirection;\n(function (SliceDirection) {\n    SliceDirection[SliceDirection[\"Forward\"] = 0] = \"Forward\";\n    SliceDirection[SliceDirection[\"Backward\"] = 1] = \"Backward\";\n})(SliceDirection || (SliceDirection = {}));\n/**\n * More general slice: given locations of important syntax nodes, find locations of all relevant\n * definitions. Locations can be mapped to lines later.\n * seedLocations are symbol locations.\n */\nfunction slice(ast, seedLocations, dataflowAnalyzer, direction = SliceDirection.Backward) {\n    dataflowAnalyzer = dataflowAnalyzer || new _data_flow__WEBPACK_IMPORTED_MODULE_2__[\"DataflowAnalyzer\"]();\n    const cfg = new _control_flow__WEBPACK_IMPORTED_MODULE_1__[\"ControlFlowGraph\"](ast);\n    const dfa = dataflowAnalyzer.analyze(cfg).dataflows;\n    // Include at least the full statements for each seed.\n    let acceptLocation = (loc) => true;\n    let sliceLocations = new LocationSet();\n    if (seedLocations) {\n        let seedStatementLocations = findSeedStatementLocations(seedLocations, cfg);\n        acceptLocation = loc => seedStatementLocations.some(seedStmtLoc => intersect(seedStmtLoc, loc));\n        sliceLocations = new LocationSet(...seedStatementLocations.items);\n    }\n    let lastSize;\n    do {\n        lastSize = sliceLocations.size;\n        for (let flow of dfa.items) {\n            const [start, end] = direction === SliceDirection.Backward ?\n                [flow.fromNode.location, flow.toNode.location] :\n                [flow.toNode.location, flow.fromNode.location];\n            if (acceptLocation(end)) {\n                sliceLocations.add(end);\n            }\n            if (sliceLocations.some(loc => within(end, loc))) {\n                sliceLocations.add(start);\n            }\n        }\n    } while (sliceLocations.size > lastSize);\n    return sliceLocations;\n}\nfunction findSeedStatementLocations(seedLocations, cfg) {\n    let seedStatementLocations = new LocationSet();\n    seedLocations.items.forEach(seedLoc => {\n        for (let block of cfg.blocks) {\n            for (let statement of block.statements) {\n                if (intersect(seedLoc, statement.location)) {\n                    seedStatementLocations.add(statement.location);\n                }\n            }\n        }\n    });\n    return seedStatementLocations;\n}\n/**\n * Slice: given a set of lines in a program, return lines it depends on.\n * OUT OF DATE: use slice() instead of sliceLines().\n */\nfunction sliceLines(code, relevantLineNumbers) {\n    const ast = Object(_python_parser__WEBPACK_IMPORTED_MODULE_0__[\"parse\"])(code);\n    const cfg = new _control_flow__WEBPACK_IMPORTED_MODULE_1__[\"ControlFlowGraph\"](ast);\n    let dataflowAnalyzer = new _data_flow__WEBPACK_IMPORTED_MODULE_2__[\"DataflowAnalyzer\"]();\n    const dfa = dataflowAnalyzer.analyze(cfg).dataflows;\n    let lastSize;\n    do {\n        lastSize = relevantLineNumbers.size;\n        for (let flow of dfa.items) {\n            const fromLines = lineRange(flow.fromNode.location);\n            const toLines = lineRange(flow.toNode.location);\n            const startLines = toLines;\n            const endLines = fromLines;\n            if (!relevantLineNumbers.intersect(startLines).empty) {\n                relevantLineNumbers = relevantLineNumbers.union(endLines);\n            }\n        }\n    } while (relevantLineNumbers.size > lastSize);\n    return relevantLineNumbers;\n}\n\n\n//# sourceURL=webpack:///./src/slice.ts?");

/***/ }),

/***/ "./src/specs/__builtins__.json":
/*!*************************************!*\
  !*** ./src/specs/__builtins__.json ***!
  \*************************************/
/*! exports provided: __builtins__, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"__builtins__\\\":{\\\"functions\\\":[\\\"credits\\\",{\\\"name\\\":\\\"delattr\\\",\\\"updates\\\":[1]},\\\"dict\\\",\\\"dir\\\",\\\"divmod\\\",\\\"enumerate\\\",\\\"eval\\\",\\\"exec\\\",\\\"exit\\\",{\\\"name\\\":\\\"filter\\\",\\\"higherorder\\\":1},\\\"float\\\",\\\"format\\\",\\\"frozenset\\\",\\\"getattr\\\",\\\"globals\\\",\\\"hasattr\\\",\\\"hash\\\",\\\"help\\\",\\\"hex\\\",\\\"id\\\",\\\"input\\\",\\\"int\\\",\\\"isinstance\\\",\\\"issubclass\\\",\\\"iter\\\",\\\"len\\\",\\\"license\\\",\\\"list\\\",\\\"locals\\\",{\\\"name\\\":\\\"map\\\",\\\"higherorder\\\":1},\\\"max\\\",\\\"memoryview\\\",\\\"min\\\",\\\"next\\\",\\\"object\\\",\\\"oct\\\",\\\"open\\\",\\\"ord\\\",\\\"pow\\\",\\\"print\\\",\\\"property\\\",\\\"quit\\\",\\\"range\\\",\\\"repr\\\",\\\"reversed\\\",\\\"round\\\",\\\"set\\\",{\\\"name\\\":\\\"setattr\\\",\\\"updates\\\":[1]},\\\"slice\\\",\\\"sorted\\\",\\\"staticmethod\\\",\\\"str\\\",\\\"sum\\\",\\\"super\\\",\\\"tuple\\\",\\\"type\\\",\\\"vars\\\",\\\"zip\\\"],\\\"types\\\":{\\\"BaseException\\\":{\\\"methods\\\":[{\\\"name\\\":\\\"with_traceback\\\",\\\"updates\\\":[1]}]}}}}\");\n\n//# sourceURL=webpack:///./src/specs/__builtins__.json?");

/***/ }),

/***/ "./src/specs/index.ts":
/*!****************************!*\
  !*** ./src/specs/index.ts ***!
  \****************************/
/*! exports provided: DefaultSpecs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultSpecs\", function() { return DefaultSpecs; });\n/* harmony import */ var _builtins_json__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./__builtins__.json */ \"./src/specs/__builtins__.json\");\nvar _builtins_json__WEBPACK_IMPORTED_MODULE_0___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./__builtins__.json */ \"./src/specs/__builtins__.json\", 1);\n/* harmony import */ var _random_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./random.json */ \"./src/specs/random.json\");\nvar _random_json__WEBPACK_IMPORTED_MODULE_1___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./random.json */ \"./src/specs/random.json\", 1);\n/* harmony import */ var _matplotlib_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./matplotlib.json */ \"./src/specs/matplotlib.json\");\nvar _matplotlib_json__WEBPACK_IMPORTED_MODULE_2___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./matplotlib.json */ \"./src/specs/matplotlib.json\", 1);\n/* harmony import */ var _pandas_json__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pandas.json */ \"./src/specs/pandas.json\");\nvar _pandas_json__WEBPACK_IMPORTED_MODULE_3___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./pandas.json */ \"./src/specs/pandas.json\", 1);\n/* harmony import */ var _sklearn_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sklearn.json */ \"./src/specs/sklearn.json\");\nvar _sklearn_json__WEBPACK_IMPORTED_MODULE_4___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./sklearn.json */ \"./src/specs/sklearn.json\", 1);\n/* harmony import */ var _numpy_json__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./numpy.json */ \"./src/specs/numpy.json\");\nvar _numpy_json__WEBPACK_IMPORTED_MODULE_5___namespace = /*#__PURE__*/__webpack_require__.t(/*! ./numpy.json */ \"./src/specs/numpy.json\", 1);\n\n\n\n\n\n\nconst DefaultSpecs = Object.assign({}, _builtins_json__WEBPACK_IMPORTED_MODULE_0___namespace, _random_json__WEBPACK_IMPORTED_MODULE_1___namespace, _matplotlib_json__WEBPACK_IMPORTED_MODULE_2___namespace, _pandas_json__WEBPACK_IMPORTED_MODULE_3___namespace, _sklearn_json__WEBPACK_IMPORTED_MODULE_4___namespace, _numpy_json__WEBPACK_IMPORTED_MODULE_5___namespace);\n\n\n//# sourceURL=webpack:///./src/specs/index.ts?");

/***/ }),

/***/ "./src/specs/matplotlib.json":
/*!***********************************!*\
  !*** ./src/specs/matplotlib.json ***!
  \***********************************/
/*! exports provided: matplotlib, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"matplotlib\\\":{\\\"functions\\\":[\\\"checkdep_dvipng\\\",\\\"checkdep_ghostscript\\\",\\\"checkdep_inkscape\\\",\\\"checkdep_pdftops\\\",\\\"checkdep_ps_distiller\\\",\\\"checkdep_usetex\\\",\\\"compare_versions\\\",\\\"cycler\\\",\\\"dedent\\\",{\\\"name\\\":\\\"get_backend\\\",\\\"reads\\\":[\\\"rcParams\\\"]},\\\"get_cachedir\\\",\\\"get_configdir\\\",\\\"get_data_path\\\",\\\"get_home\\\",\\\"get_label\\\",\\\"get_py2exe_datafiles\\\",{\\\"name\\\":\\\"interactive\\\",\\\"updates\\\":[\\\"rcParams\\\"]},{\\\"name\\\":\\\"is_interactive\\\",\\\"reads\\\":[\\\"rcParams\\\"]},\\\"is_url\\\",\\\"matplotlib_fname\\\",\\\"mplDeprecation\\\",{\\\"name\\\":\\\"rc\\\",\\\"updates\\\":[\\\"rcParams\\\"]},{\\\"name\\\":\\\"rc_context\\\",\\\"updates\\\":[\\\"rcParams\\\"]},{\\\"name\\\":\\\"rc_file\\\",\\\"updates\\\":[\\\"rcParams\\\"]},{\\\"name\\\":\\\"rc_file_defaults\\\",\\\"updates\\\":[\\\"rcParams\\\"]},\\\"rc_params\\\",\\\"rc_params_from_file\\\",{\\\"name\\\":\\\"rcdefaults\\\",\\\"updates\\\":[\\\"rcParams\\\"]},\\\"sanitize_sequence\\\",\\\"test\\\",{\\\"name\\\":\\\"tk_window_focus\\\",\\\"updates\\\":[\\\"rcParams\\\"]},\\\"use\\\",\\\"validate_backend\\\"],\\\"modules\\\":{\\\"pyplot\\\":{\\\"functions\\\":[\\\"acorr\\\",\\\"angle_spectrum\\\",\\\"annotate\\\",\\\"arrow\\\",\\\"autoscale\\\",\\\"autumn\\\",\\\"axes\\\",\\\"axhline\\\",\\\"axhspan\\\",\\\"axis\\\",\\\"axvline\\\",\\\"axvspan\\\",\\\"bar\\\",\\\"barbs\\\",\\\"barh\\\",\\\"bone\\\",\\\"box\\\",\\\"boxplot\\\",\\\"broken_barh\\\",\\\"cla\\\",\\\"clabel\\\",\\\"clf\\\",\\\"clim\\\",\\\"close\\\",\\\"cm\\\",\\\"cohere\\\",\\\"colorbar\\\",\\\"colormaps\\\",\\\"connect\\\",\\\"contour\\\",\\\"contourf\\\",\\\"cool\\\",\\\"copper\\\",\\\"csd\\\",\\\"cycler\\\",\\\"dedent\\\",\\\"delaxes\\\",\\\"deprecated\\\",\\\"disconnect\\\",\\\"docstring\\\",\\\"draw\\\",\\\"draw_all\\\",\\\"draw_if_interactive\\\",\\\"errorbar\\\",\\\"eventplot\\\",\\\"figaspect\\\",\\\"figimage\\\",\\\"figlegend\\\",\\\"fignum_exists\\\",\\\"figtext\\\",\\\"fill\\\",\\\"fill_between\\\",\\\"fill_betweenx\\\",\\\"findobj\\\",\\\"flag\\\",\\\"gca\\\",\\\"gcf\\\",\\\"gci\\\",\\\"get\\\",\\\"get_backend\\\",\\\"get_cmap\\\",\\\"get_current_fig_manager\\\",\\\"get_figlabels\\\",\\\"get_fignums\\\",\\\"get_plot_commands\\\",\\\"get_scale_docs\\\",\\\"get_scale_names\\\",\\\"getp\\\",\\\"ginput\\\",\\\"gray\\\",\\\"grid\\\",\\\"hexbin\\\",\\\"hist\\\",\\\"hist2d\\\",\\\"hlines\\\",\\\"hot\\\",\\\"hsv\\\",\\\"importlib\\\",\\\"imread\\\",\\\"imsave\\\",\\\"imshow\\\",\\\"inferno\\\",\\\"inspect\\\",\\\"install_repl_d\\\",\\\"matshow\\\",\\\"minorticks_off\\\",\\\"minorticks_on\\\",\\\"mlab\\\",{\\\"name\\\":\\\"figure\\\",\\\"reads\\\":[\\\"rcParams\\\"]},\\\"new_figure_manager\\\",\\\"nipy_spectral\\\",\\\"np\\\",\\\"pause\\\",\\\"pcolor\\\",\\\"pcolormesh\\\",\\\"phase_spectrum\\\",\\\"pie\\\",\\\"pink\\\",\\\"plasma\\\",\\\"plot\\\",\\\"plot_date\\\",\\\"plotfile\\\",\\\"plotting\\\",\\\"polar\\\",\\\"prism\\\",\\\"psd\\\",\\\"pylab_setup\\\",\\\"quiver\\\",\\\"quiverkey\\\",\\\"rc\\\",\\\"rcParams\\\",\\\"rcParamsDefault\\\",\\\"rcParamsOrig\\\",\\\"rc_context\\\",\\\"rcdefaults\\\",\\\"rcsetup\\\",\\\"re\\\",\\\"register_cmap\\\",\\\"rgrids\\\",\\\"savefig\\\",\\\"sca\\\",\\\"scatter\\\",\\\"sci\\\",\\\"semilogx\\\",\\\"semilogy\\\",\\\"set_cmap\\\",\\\"setp\\\",\\\"show\\\",\\\"silent_list\\\",\\\"specgram\\\",\\\"spring\\\",\\\"spy\\\",\\\"stackplot\\\",\\\"stem\\\",\\\"step\\\",\\\"streamplot\\\",\\\"style\\\",\\\"subplot\\\",{\\\"name\\\":\\\"subplot_tool\\\",\\\"updates\\\":[\\\"rcParams\\\"]},\\\"subplot2grid\\\",\\\"subplots\\\",\\\"subplots_adjust\\\",\\\"summer\\\",\\\"suptitle\\\",{\\\"name\\\":\\\"switch_backend\\\",\\\"updates\\\":[\\\"rcParams\\\"]},\\\"sys\\\",\\\"table\\\",\\\"text\\\",\\\"thetagrids\\\",\\\"tick_params\\\",\\\"ticklabel_format\\\",\\\"tight_layout\\\",\\\"time\\\",\\\"title\\\",\\\"tricontour\\\",\\\"tricontourf\\\",\\\"tripcolor\\\",\\\"triplot\\\",\\\"twinx\\\",\\\"twiny\\\",\\\"uninstall_repl_displayhook\\\",\\\"violinplot\\\",\\\"viridis\\\",\\\"vlines\\\",\\\"waitforbuttonpress\\\",\\\"warn_deprecated\\\",\\\"warnings\\\",\\\"winter\\\",\\\"xcorr\\\",{\\\"name\\\":\\\"xkcd\\\",\\\"reads\\\":[\\\"rcParams\\\"]},\\\"xlabel\\\",\\\"xlim\\\",\\\"xscale\\\",\\\"xticks\\\",\\\"ylabel\\\",\\\"ylim\\\",\\\"yscale\\\",\\\"yticks\\\"]}}}}\");\n\n//# sourceURL=webpack:///./src/specs/matplotlib.json?");

/***/ }),

/***/ "./src/specs/numpy.json":
/*!******************************!*\
  !*** ./src/specs/numpy.json ***!
  \******************************/
/*! exports provided: numpy, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"numpy\\\":{\\\"functions\\\":[{\\\"name\\\":\\\"abs\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"absolute\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"add\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"add_docstring\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"add_newdoc\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"add_newdoc_ufunc\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"alen\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"all\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"allclose\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"alltrue\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"amax\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"amin\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"angle\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"any\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"append\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"apply_along_axis\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"apply_over_axes\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"arange\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"arccos\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"arccosh\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"arcsin\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"arcsinh\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"arctan\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"arctan2\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"arctanh\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"argmax\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"argmin\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"argpartition\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"argsort\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"argwhere\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"around\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"array\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"array2string\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"array_equal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"array_equiv\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"array_repr\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"array_split\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"array_str\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"asanyarray\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"asarray\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"asarray_chkfinite\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ascontiguousarray\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"asfarray\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"asfortranarray\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"asmatrix\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"asscalar\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"atleast_1d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"atleast_2d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"atleast_3d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"average\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"bartlett\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"base_repr\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"binary_repr\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"bincount\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"bitwise_and\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"bitwise_not\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"bitwise_or\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"bitwise_xor\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"blackman\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"block\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"bmat\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"broadcast\\\",\\\"returns\\\":\\\"broadcast\\\"},{\\\"name\\\":\\\"broadcast_arrays\\\",\\\"returns\\\":\\\"broadcast\\\"},{\\\"name\\\":\\\"broadcast_to\\\",\\\"returns\\\":\\\"broadcast\\\"},{\\\"name\\\":\\\"busday_count\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"busday_offset\\\",\\\"returns\\\":\\\"ndarray\\\"},\\\"byte_bounds\\\",{\\\"name\\\":\\\"can_cast\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cbrt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cdouble\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ceil\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"choose\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"clip\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"clongdouble\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"clongfloat\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"column_stack\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"common_type\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"compare_chararrays\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"compress\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"concatenate\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"conj\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"conjugate\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"convolve\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"copy\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"copysign\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"copyto\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"corrcoef\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"correlate\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cos\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cosh\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"count_nonzero\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cov\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cross\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"csingle\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cumprod\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cumproduct\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cumsum\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"datetime64\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"datetime_as_string\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"datetime_data\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"deg2rad\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"degrees\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"delete\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"deprecate\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"deprecate_with_doc\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"diag\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"diag_indices\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"diag_indices_from\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"diagflat\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"diagonal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"diff\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"digitize\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"disp\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"divide\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"divmod\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"dot\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"double\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"dsplit\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"dstack\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"dtype\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ediff1d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"einsum\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"einsum_path\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"empty\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"empty_like\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"equal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"errstate\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"exp\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"exp2\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"expand_dims\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"expm1\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"extract\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"eye\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fabs\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fastCopyAndTranspose\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fill_diagonal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"find_common_type\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"finfo\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fix\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"flatiter\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"flatnonzero\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"flexible\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"flip\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fliplr\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"flipud\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"float\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"float16\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"float32\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"float64\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"float_\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"float_power\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"floating\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"floor\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"floor_divide\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fmax\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fmin\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fmod\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"format_float_positional\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"format_float_scientific\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"format_parser\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"frexp\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"frombuffer\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fromfile\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fromfunction\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fromiter\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"frompyfunc\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fromregex\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fromstring\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"full\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"full_like\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fv\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"gcd\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"generic\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"genfromtxt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"geomspace\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"get_array_wrap\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"get_include\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"get_printoptions\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"getbufsize\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"geterr\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"geterrcall\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"geterrobj\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"gradient\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"greater\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"greater_equal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"half\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"hamming\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"hanning\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"heaviside\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"histogram\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"histogram2d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"histogram_bin_edges\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"histogramdd\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"hsplit\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"hstack\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"hypot\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"i0\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"identity\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"iinfo\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"imag\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"in1d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"indices\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"inexact\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"info\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"inner\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"insert\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"int_asbuffer\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"intc\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"integer\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"interp\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"intersect1d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"intp\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"invert\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ipmt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"irr\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"is_busday\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isclose\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"iscomplex\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"iscomplexobj\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isfinite\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isfortran\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isin\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isinf\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isnan\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isnat\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isneginf\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isposinf\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isreal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isrealobj\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"isscalar\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"issctype\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"issubclass_\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"issubdtype\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"issubsctype\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"iterable\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ix_\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"kaiser\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"kron\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"lcm\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ldexp\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"left_shift\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"less\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"less_equal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"lexsort\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"linspace\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"load\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"loads\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"loadtxt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"log\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"log10\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"log1p\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"log2\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"logaddexp\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"logaddexp2\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"logical_and\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"logical_not\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"logical_or\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"logical_xor\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"logspace\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"long\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"longcomplex\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"longdouble\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"longfloat\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"longlong\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"lookfor\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"mafromtxt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"mask_indices\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"mat\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"matmul\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"matrix\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"max\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"maximum\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"maximum_sctype\\\",\\\"returns\\\":\\\"ndarray\\\"},\\\"may_share_memory\\\",{\\\"name\\\":\\\"mean\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"median\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"memmap\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"meshgrid\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"min\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"min_scalar_type\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"minimum\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"mintypecode\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"mirr\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"mod\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"modf\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"moveaxis\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"msort\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"multiply\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nan_to_num\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanargmax\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanargmin\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nancumprod\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nancumsum\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanmax\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanmean\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanmedian\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanmin\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanpercentile\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanprod\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanquantile\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanstd\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nansum\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nanvar\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ndarray\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ndenumerate\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ndfromtxt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ndim\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"negative\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nested_iters\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nextafter\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nonzero\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"not_equal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nper\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"npv\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"obj2sctype\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ones\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ones_like\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"outer\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"packbits\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"pad\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"partition\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"percentile\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"piecewise\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"place\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"pmt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"poly\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"polyadd\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"polyder\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"polydiv\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"polyfit\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"polyint\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"polymul\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"polysub\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"polyval\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"positive\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"power\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ppmt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"printoptions\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"prod\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"product\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"promote_types\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ptp\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"put\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"put_along_axis\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"putmask\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"pv\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"quantile\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"rad2deg\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"radians\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"rank\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"rate\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ravel\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ravel_multi_index\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"real\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"real_if_close\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"recfromcsv\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"recfromtxt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"reciprocal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"remainder\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"repeat\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"require\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"reshape\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"resize\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"result_type\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"right_shift\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"rint\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"roll\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"rollaxis\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"roots\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"rot90\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"round\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"round_\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"row_stack\\\",\\\"returns\\\":\\\"ndarray\\\"},\\\"safe_eval\\\",\\\"save\\\",\\\"savetxt\\\",\\\"savez\\\",\\\"savez_compressed\\\",{\\\"name\\\":\\\"sctype2char\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"searchsorted\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"select\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"set_numeric_ops\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"set_printoptions\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"set_string_function\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"setbufsize\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"setdiff1d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"seterr\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"seterrcall\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"seterrobj\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"setxor1d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"shape\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"shares_memory\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"short\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"show_config\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sign\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"signbit\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"signedinteger\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sin\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sinc\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"single\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"singlecomplex\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sinh\\\",\\\"returns\\\":\\\"ndarray\\\"},\\\"size\\\",{\\\"name\\\":\\\"sometrue\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sort\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sort_complex\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"source\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"spacing\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"split\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sqrt\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"square\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"squeeze\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"stack\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"std\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"subtract\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sum\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"swapaxes\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"take\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"take_along_axis\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tan\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tanh\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tensordot\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tile\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"timedelta64\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"trace\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"transpose\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"trapz\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tri\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tril\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tril_indices\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tril_indices_from\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"trim_zeros\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"triu\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"triu_indices\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"triu_indices_from\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"true_divide\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"trunc\\\",\\\"returns\\\":\\\"ndarray\\\"},\\\"typename\\\",{\\\"name\\\":\\\"union1d\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"unique\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"unpackbits\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"unravel_index\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"unwrap\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"vander\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"var\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"vdot\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"vectorize\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"vsplit\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"vstack\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"where\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"who\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"zeros\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"zeros_like\\\",\\\"returns\\\":\\\"ndarray\\\"}],\\\"types\\\":{\\\"ndarray\\\":{\\\"methods\\\":[{\\\"name\\\":\\\"all\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"any\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"argmax\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"argmin\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"argpartition\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"argsort\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"astype\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"base\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"byteswap\\\",\\\"returns\\\":\\\"ndarray\\\",\\\"updates\\\":[0]},{\\\"name\\\":\\\"choose\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"clip\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"compress\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"conj\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"conjugate\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"copy\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cumprod\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"cumsum\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"data\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"diagonal\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"dot\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"dump\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"dumps\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"fill\\\",\\\"returns\\\":\\\"ndarray\\\",\\\"updates\\\":[0]},{\\\"name\\\":\\\"flags\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"flat\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"flatten\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"getfield\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"imag\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"item\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"itemset\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"itemsize\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"max\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"mean\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"min\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nbytes\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ndim\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"newbyteorder\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"nonzero\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"partition\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"prod\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ptp\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"put\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"ravel\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"real\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"repeat\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"reshape\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"resize\\\",\\\"returns\\\":\\\"ndarray\\\",\\\"updates\\\":[0]},{\\\"name\\\":\\\"round\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"searchsorted\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"setfield\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"setflags\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"shape\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"size\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sort\\\",\\\"updates\\\":[0]},{\\\"name\\\":\\\"squeeze\\\",\\\"returns\\\":\\\"ndarray\\\",\\\"updates\\\":[0]},{\\\"name\\\":\\\"std\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"strides\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"sum\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"swapaxes\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"take\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tobytes\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tofile\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tolist\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"tostring\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"trace\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"transpose\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"var\\\",\\\"returns\\\":\\\"ndarray\\\"},{\\\"name\\\":\\\"view\\\",\\\"returns\\\":\\\"ndarray\\\"}]}}}}\");\n\n//# sourceURL=webpack:///./src/specs/numpy.json?");

/***/ }),

/***/ "./src/specs/pandas.json":
/*!*******************************!*\
  !*** ./src/specs/pandas.json ***!
  \*******************************/
/*! exports provided: pandas, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"pandas\\\":{\\\"functions\\\":[\\\"array\\\",\\\"bdate_range\\\",\\\"concat\\\",\\\"crosstab\\\",\\\"cut\\\",\\\"date_range\\\",\\\"datetime\\\",\\\"describe_option\\\",\\\"eval\\\",\\\"factorize\\\",\\\"get_dummies\\\",\\\"get_option\\\",\\\"infer_freq\\\",\\\"interval_range\\\",\\\"isna\\\",\\\"isnull\\\",\\\"lreshape\\\",\\\"melt\\\",\\\"merge\\\",\\\"merge_asof\\\",\\\"merge_ordered\\\",\\\"notna\\\",\\\"notnull\\\",\\\"option_context\\\",\\\"period_range\\\",\\\"pivot\\\",\\\"pivot_table\\\",\\\"qcut\\\",{\\\"name\\\":\\\"read_clipboard\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_csv\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_excel\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_feather\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_fwf\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_gbq\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_hdf\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_html\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_json\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_msgpack\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_parquet\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_pickle\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_sas\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_sql\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_sql_query\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_sql_table\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_stata\\\",\\\"returns\\\":\\\"DataFrame\\\"},{\\\"name\\\":\\\"read_table\\\",\\\"returns\\\":\\\"DataFrame\\\"},\\\"reset_option\\\",\\\"set_eng_float_format\\\",\\\"set_option\\\",\\\"show_versions\\\",\\\"test\\\",\\\"timedelta_range\\\",\\\"to_datetime\\\",\\\"to_msgpack\\\",\\\"to_numeric\\\",\\\"to_pickle\\\",\\\"to_timedelta\\\",\\\"unique\\\",\\\"value_counts\\\",\\\"wide_to_long\\\"],\\\"types\\\":{\\\"DataFrame\\\":{\\\"methods\\\":[\\\"abs\\\",\\\"add\\\",\\\"add_prefix\\\",\\\"add_suffix\\\",\\\"agg\\\",\\\"aggregate\\\",\\\"align\\\",\\\"all\\\",\\\"any\\\",\\\"append\\\",\\\"apply\\\",\\\"applymap\\\",\\\"as_blocks\\\",\\\"as_matrix\\\",\\\"asfreq\\\",\\\"asof\\\",\\\"assign\\\",\\\"astype\\\",\\\"at_time\\\",\\\"between_time\\\",\\\"bfill\\\",\\\"bool\\\",\\\"boxplot\\\",\\\"clip\\\",\\\"clip_lower\\\",\\\"clip_upper\\\",\\\"combine\\\",\\\"combine_first\\\",\\\"compound\\\",\\\"convert_objects\\\",\\\"copy\\\",\\\"corr\\\",\\\"corrwith\\\",\\\"count\\\",\\\"cov\\\",\\\"cummax\\\",\\\"cummin\\\",\\\"cumprod\\\",\\\"cumsum\\\",\\\"describe\\\",\\\"diff\\\",\\\"div\\\",\\\"divide\\\",\\\"dot\\\",\\\"drop\\\",\\\"drop_duplicates\\\",\\\"droplevel\\\",\\\"dropna\\\",\\\"duplicated\\\",\\\"eq\\\",\\\"equals\\\",\\\"eval\\\",\\\"ewm\\\",\\\"expanding\\\",\\\"ffill\\\",\\\"fillna\\\",\\\"filter\\\",\\\"first\\\",\\\"first_valid_index\\\",\\\"floordiv\\\",\\\"from_csv\\\",\\\"from_dict\\\",\\\"from_items\\\",\\\"from_records\\\",\\\"ge\\\",\\\"get\\\",\\\"get_dtype_counts\\\",\\\"get_ftype_counts\\\",\\\"get_value\\\",\\\"get_values\\\",\\\"groupby\\\",\\\"gt\\\",\\\"head\\\",\\\"hist\\\",\\\"idxmax\\\",\\\"idxmin\\\",\\\"infer_objects\\\",\\\"info\\\",\\\"insert\\\",\\\"interpolate\\\",\\\"isin\\\",\\\"isna\\\",\\\"isnull\\\",\\\"items\\\",\\\"iteritems\\\",\\\"iterrows\\\",\\\"itertuples\\\",\\\"join\\\",\\\"keys\\\",\\\"kurt\\\",\\\"kurtosis\\\",\\\"last\\\",\\\"last_valid_index\\\",\\\"le\\\",\\\"lookup\\\",\\\"lt\\\",\\\"mad\\\",\\\"mask\\\",\\\"max\\\",\\\"mean\\\",\\\"median\\\",{\\\"name\\\":\\\"melt\\\",\\\"updates\\\":[0]},\\\"memory_usage\\\",\\\"merge\\\",\\\"min\\\",\\\"mod\\\",\\\"mode\\\",\\\"mul\\\",\\\"multiply\\\",\\\"ne\\\",\\\"nlargest\\\",\\\"notna\\\",\\\"notnull\\\",\\\"nsmallest\\\",\\\"nunique\\\",\\\"pct_change\\\",\\\"pipe\\\",\\\"pivot\\\",\\\"pivot_table\\\",\\\"plot\\\",{\\\"name\\\":\\\"pop\\\",\\\"updates\\\":[0]},\\\"pow\\\",\\\"prod\\\",\\\"product\\\",\\\"quantile\\\",\\\"query\\\",\\\"radd\\\",\\\"rank\\\",\\\"rdiv\\\",\\\"reindex\\\",\\\"reindex_axis\\\",\\\"reindex_like\\\",\\\"rename\\\",\\\"rename_axis\\\",\\\"reorder_levels\\\",\\\"replace\\\",\\\"resample\\\",\\\"reset_index\\\",\\\"rfloordiv\\\",\\\"rmod\\\",\\\"rmul\\\",\\\"rolling\\\",\\\"round\\\",\\\"rpow\\\",\\\"rsub\\\",\\\"rtruediv\\\",\\\"sample\\\",\\\"select\\\",\\\"select_dtypes\\\",\\\"sem\\\",\\\"set_axis\\\",\\\"set_index\\\",\\\"set_value\\\",\\\"shift\\\",\\\"skew\\\",\\\"slice_shift\\\",\\\"sort_index\\\",\\\"sort_values\\\",\\\"squeeze\\\",\\\"stack\\\",\\\"std\\\",\\\"sub\\\",\\\"subtract\\\",\\\"sum\\\",\\\"swapaxes\\\",\\\"swaplevel\\\",\\\"tail\\\",\\\"take\\\",\\\"to_clipboard\\\",\\\"to_csv\\\",\\\"to_dense\\\",\\\"to_dict\\\",\\\"to_excel\\\",\\\"to_feather\\\",\\\"to_gbq\\\",\\\"to_hdf\\\",\\\"to_html\\\",\\\"to_json\\\",\\\"to_latex\\\",\\\"to_msgpack\\\",\\\"to_numpy\\\",\\\"to_panel\\\",\\\"to_parquet\\\",\\\"to_period\\\",\\\"to_pickle\\\",\\\"to_records\\\",\\\"to_sparse\\\",\\\"to_sql\\\",\\\"to_stata\\\",\\\"to_string\\\",\\\"to_timestamp\\\",\\\"to_xarray\\\",\\\"transform\\\",\\\"transpose\\\",\\\"truediv\\\",\\\"truncate\\\",\\\"tshift\\\",\\\"tz_convert\\\",\\\"tz_localize\\\",\\\"unstack\\\",{\\\"name\\\":\\\"update\\\",\\\"updates\\\":[0]},\\\"var\\\",\\\"where\\\",\\\"xs\\\"]}}}}\");\n\n//# sourceURL=webpack:///./src/specs/pandas.json?");

/***/ }),

/***/ "./src/specs/random.json":
/*!*******************************!*\
  !*** ./src/specs/random.json ***!
  \*******************************/
/*! exports provided: random, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"random\\\":{\\\"functions\\\":[\\\"betavariate\\\",\\\"choice\\\",\\\"choices\\\",\\\"expovariate\\\",\\\"gammavariate\\\",\\\"gauss\\\",\\\"getrandbits\\\",\\\"getstate\\\",\\\"lognormvariate\\\",\\\"normalvariate\\\",\\\"paretovariate\\\",\\\"randint\\\",\\\"random\\\",\\\"randrange\\\",\\\"sample\\\",\\\"seed\\\",\\\"setstate\\\",\\\"shuffle\\\",\\\"triangular\\\",\\\"uniform\\\",\\\"vonmisesvariate\\\",\\\"weibullvariate\\\"]}}\");\n\n//# sourceURL=webpack:///./src/specs/random.json?");

/***/ }),

/***/ "./src/specs/sklearn.json":
/*!********************************!*\
  !*** ./src/specs/sklearn.json ***!
  \********************************/
/*! exports provided: sklearn, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"sklearn\\\":{\\\"modules\\\":{\\\"cluster\\\":{\\\"types\\\":{\\\"KMeans\\\":{\\\"methods\\\":[{\\\"name\\\":\\\"fit\\\",\\\"updates\\\":[0]},{\\\"name\\\":\\\"fit_predict\\\",\\\"updates\\\":[0]},{\\\"name\\\":\\\"fit_transform\\\",\\\"updates\\\":[0]},\\\"predict\\\",\\\"score\\\",\\\"transform\\\"]}}},\\\"datasets\\\":{\\\"functions\\\":[\\\"clear_data_home\\\",\\\"dump_svmlight_file\\\",\\\"fetch_20newsgroups\\\",\\\"fetch_20newsgroups_vectorized\\\",\\\"fetch_lfw_pairs\\\",\\\"fetch_lfw_people\\\",\\\"fetch_mldata\\\",\\\"fetch_olivetti_faces\\\",\\\"fetch_species_distributions\\\",\\\"fetch_california_housing\\\",\\\"fetch_covtype\\\",\\\"fetch_rcv1\\\",\\\"fetch_kddcup99\\\",\\\"fetch_openml\\\",\\\"get_data_home\\\",\\\"load_boston\\\",\\\"load_diabetes\\\",\\\"load_digits\\\",\\\"load_files\\\",\\\"load_iris\\\",\\\"load_breast_cancer\\\",\\\"load_linnerud\\\",\\\"load_mlcomp\\\",\\\"load_sample_image\\\",\\\"load_sample_images\\\",\\\"load_svmlight_file\\\",\\\"load_svmlight_files\\\",\\\"load_wine\\\",\\\"make_biclusters\\\",\\\"make_blobs\\\",\\\"make_circles\\\",\\\"make_classification\\\",\\\"make_checkerboard\\\",\\\"make_friedman1\\\",\\\"make_friedman2\\\",\\\"make_friedman3\\\",\\\"make_gaussian_quantiles\\\",\\\"make_hastie_10_2\\\",\\\"make_low_rank_matrix\\\",\\\"make_moons\\\",\\\"make_multilabel_classification\\\",\\\"make_regression\\\",\\\"make_s_curve\\\",\\\"make_sparse_coded_signal\\\",\\\"make_sparse_spd_matrix\\\",\\\"make_sparse_uncorrelated\\\",\\\"make_spd_matrix\\\",\\\"make_swiss_roll\\\",\\\"mldata_filename\\\"]}}}}\");\n\n//# sourceURL=webpack:///./src/specs/sklearn.json?");

/***/ }),

/***/ "./src/symbol-table.ts":
/*!*****************************!*\
  !*** ./src/symbol-table.ts ***!
  \*****************************/
/*! exports provided: SymbolTable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SymbolTable\", function() { return SymbolTable; });\n/* harmony import */ var _python_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./python-parser */ \"./src/python-parser.ts\");\n\nfunction mapDict(obj, f) {\n    const result = {};\n    Object.keys(obj).forEach(k => result[k] = f(obj[k]));\n    return result;\n}\nfunction cleanFunc(fdesc) {\n    if (typeof fdesc === 'string') {\n        return { name: fdesc, reads: [], updates: [] };\n    }\n    else {\n        if (!fdesc.reads) {\n            fdesc.reads = [];\n        }\n        if (!fdesc.updates) {\n            fdesc.updates = [];\n        }\n        return fdesc;\n    }\n}\nfunction cleanType(tdesc) {\n    return {\n        methods: tdesc.methods ? tdesc.methods.map(m => cleanFunc(m)) : []\n    };\n}\nfunction cleanModule(mdesc) {\n    const mod = {\n        functions: mdesc.functions ? mdesc.functions.map(f => cleanFunc(f)) : [],\n        types: mdesc.types ? mapDict(mdesc.types, cleanType) : {},\n        modules: mdesc.modules ? mapDict(mdesc.modules, cleanModule) : {}\n    };\n    mod.functions.forEach(f => {\n        if (f.returns) {\n            f.returnsType = mod.types[f.returns];\n        }\n    });\n    Object.keys(mod.types).forEach(typename => {\n        const ty = mod.types[typename];\n        ty.methods.forEach(f => {\n            if (f.returns) {\n                f.returnsType = mod.types[f.returns];\n            }\n        });\n    });\n    return mod;\n}\nclass SymbolTable {\n    constructor(jsonSpecs) {\n        this.jsonSpecs = jsonSpecs;\n        this.modules = {};\n        this.types = {};\n        this.functions = {};\n        // preload all the built-in functions.\n        this.importModuleDefinitions('__builtins__', [{ path: '*', name: '' }]);\n    }\n    lookupFunction(name) {\n        const spec = this.functions[name];\n        if (spec) {\n            return spec;\n        }\n        const clss = this.types[name];\n        if (clss) {\n            return clss.methods.find(fn => fn.name === '__init__') ||\n                { name: '__init__', updates: ['0'], returns: name, returnsType: clss };\n        }\n        return undefined;\n    }\n    lookupNode(func) {\n        return func.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"] ? this.lookupFunction(func.id) :\n            func.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"DOT\"] && func.value.type === _python_parser__WEBPACK_IMPORTED_MODULE_0__[\"NAME\"] ? this.lookupModuleFunction(func.value.id, func.name)\n                : undefined;\n    }\n    lookupModuleFunction(modName, funcName) {\n        const mod = this.modules[modName];\n        return mod ? mod.functions.find(f => f.name === funcName) : undefined;\n    }\n    importModule(modulePath, alias) {\n        const spec = this.lookupSpec(this.jsonSpecs, modulePath.split('.'));\n        if (!spec) {\n            console.log(`*** WARNING no spec for module ${modulePath}`);\n            return;\n        }\n        if (modulePath) {\n            this.modules[modulePath] = spec;\n            if (alias && alias.length) {\n                this.modules[alias] = spec;\n            }\n        }\n    }\n    importModuleDefinitions(namePath, imports) {\n        const spec = this.lookupSpec(this.jsonSpecs, namePath.split('.'));\n        if (!spec) {\n            console.log(`*** WARNING no spec for module ${namePath}`);\n            return;\n        }\n        if (spec) {\n            imports.forEach(imp => {\n                const funs = spec.functions ? spec.functions.map(f => cleanFunc(f)) : [];\n                if (imp.path === '*') {\n                    funs.forEach(f => this.functions[f.name] = f);\n                    if (spec.types) {\n                        Object.keys(spec.types).forEach(fname => this.types[fname] = spec.types[fname]);\n                    }\n                }\n                else if (spec.types && spec.types[imp.name]) {\n                    this.types[imp.name] = spec.types[imp.name];\n                }\n                else {\n                    const fspec = funs.find(f => f.name === imp.name);\n                    if (fspec) {\n                        this.functions[fspec.name] = fspec;\n                    }\n                }\n            });\n        }\n        else {\n            console.log(`*** WARNING no spec for module ${namePath}`);\n        }\n    }\n    lookupSpec(map, parts) {\n        if (!map || parts.length == 0) {\n            return undefined;\n        }\n        const spec = map[parts[0]];\n        if (!spec) {\n            return undefined;\n        }\n        if (parts.length > 1) {\n            return this.lookupSpec(spec.modules, parts.slice(1));\n        }\n        else {\n            return cleanModule(spec);\n        }\n    }\n}\n\n\n//# sourceURL=webpack:///./src/symbol-table.ts?");

/***/ })

/******/ })));